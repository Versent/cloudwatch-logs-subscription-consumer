{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "A sample Elasticsearch/Kibana stack that hooks up with real-time data from CloudWatch Logs using a Subscription Filter. **NOTE** This template creates one or more Amazon EC2 instances, an Amazon Kinesis stream and an Elastic Load Balancer. You will be billed for the AWS resources used if you create a stack from this template. This template requires setting the \"Create IAM resources\" parameter to True.",

  "Parameters" : {

    "KeyName": {
      "Description" : "The name of an existing key pair to enable SSH access to the EC2 instances",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },

    "InstanceType" : {
      "Description" : "EC2 instance type for the Elasticsearch nodes",
      "Type" : "String",
      "Default" : "t2.medium",
      "AllowedValues" : [ 
        "t2.micro", 
        "t2.small",
        "t2.medium",
        "t2.large",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10clarge",
        "m3.medium", 
        "m3.large", 
        "m3.xlarge", 
        "m3.2xlarge", 
        "c3.large", 
        "c3.xlarge", 
        "c3.2xlarge", 
        "c3.4xlarge", 
        "c3.8xlarge", 
        "c4.large", 
        "c4.xlarge", 
        "c4.2xlarge", 
        "c4.4xlarge", 
        "c4.8xlarge", 
        "r3.large", 
        "r3.xlarge", 
        "r3.2xlarge", 
        "r3.4xlarge", 
        "r3.8xlarge", 
        "i2.xlarge", 
        "i2.2xlarge", 
        "i2.4xlarge", 
        "i2.8xlarge", 
        "d2.xlarge", 
        "d2.2xlarge", 
        "d2.4xlarge", 
        "d2.8xlarge", 
        "hi1.4xlarge", 
        "hs1.8xlarge", 
        "cr1.8xlarge", 
        "cc2.8xlarge"
       ],
      "ConstraintDescription" : "Must be a valid EC2 instance type"
    },

    "AllowedIpSource" : {
      "Description" : "The IP address range that can be used to access the Kibana interface, the Elasticsearch API, and the EC2 instances via SSH",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x"
    },
    "VPC": {
      "Description": "The ID of the VPC we're launching into",
      "Type": "AWS::EC2::VPC::Id"
    },
    "AMIID": {
      "Description": "Which AMIID to use",
      "Type": "AWS::EC2::Image::Id"
    },
    "DefaultSecurityGroup": {
      "Description": "A default security group, which grants Mcafee/Transurban access and common bastion services",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "NATSecurityGroup": {
      "Description": "A security group, which has granted NAT outbound access to 443",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "CrossAccountID": {
      "Description": "The AWS accountID we want to allow to subscribe to the kinesis stream",
      "Type": "String"
    },
    "SubnetA": {
      "Description": "The Private Subnet Availability Zone A subnet ID for the ELB",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "SubnetB": {
      "Description": "The Private Subnet Availability Zone B subnet ID for the ELB",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "TagOwner": {
      "Description": "Owner of the stack",
      "Type": "String",
      "Default": "its@versent.com.au"
    },
    "TagEnvironment": {
      "Description": "Name of the environment(dev, nonprod, prod, etc",
      "Type": "String",
      "Default": "dev"
    },
    "TagEnvironmentNumber": {
      "Description": "environment number",
      "Type": "String",
      "Default": "1"
    },
    "TagService": {
      "Description": "Name of the overall Service",
      "Type": "String",
      "Default": "logging"
    },
    "TagApplication": {
      "Description": "Name of the Application",
      "Type": "String",
      "Default": "cloudwatch"
    },
    "TagTenant": {
      "Description": "This defines the tenant of the created service",
      "Type": "String",
      "Default": "versent"
    },
    "TagRole": {
      "Description": "This defines the role ",
      "Type": "String",
      "Default": "elk"
    },
    "ELBSSLCertificate": {
      "Description": "SSL Certificate for the Elastic Load Balancer.",
      "Type": "String"
    },
    "BuildId": {
      "Description": "An integer representing an incremental build number",
      "Type": "String",
      "Default": "1"
    },
    "DNSZoneId": {
      "Description": "DNS ZoneId for the External Route53 record to be created in",
      "Type": "String"
    },
    "DNSDomain": {
      "Description": "DNS Domain for the external Route53 record to be created in",
      "Type": "String"
    },
    "ClusterSize" : {
      "Description" : "The number of Elasticsearch nodes",
      "Type" : "Number",
      "Default" : "2"
    },
    "HttpProxyHost": {
      "Description": "Optional http_proxy host/ip. If set, export http_proxy will appear in userdata",
      "Type": "String",
      "Default": "none"
    },
    "ManagedServicesTopicARN": {
      "Description": "ManagedServicesTopicARN",
      "Type": "String",
      "Default": ""
    },
    "HttpProxyPort": {
      "Description": "Optional http proxy port. Will be used only if HttpProxyHost is set",
      "Type": "String",
      "Default": "3128"
    },
    "LogGroupNameRegex": {
      "Description": "The CloudWatch Logs log group Regex filter to use as the source for the subscription that feeds the Elasticsearch cluster",
      "Type": "String",
      "Default": ""
    },
    "ESVolumeSnapshotId": {
      "Description": "SnapshotID to use for creation of the data volume.",
      "Type": "String",
      "Default": ""
    },
    "ESVolumeSize": {
      "Description": "Size of the Data volume where ElasticSearch indexes are kept.",
      "Type": "String",
      "Default": "200"
    },

    "NginxUsername" : {
      "Description": "Username to access the Kibana interface and the Elasticsearch API",
      "Type": "String",
      "MinLength" : "1"
    },

    "NginxPassword" : {
      "Description": "Password to access the Kibana interface and the Elasticsearch API",
      "Type": "String",
      "NoEcho" : "true"
    },
    "S3bucketSource": {
      "Description": "The S3 bucket for source binaries and packages",
      "Type": "String"
    },
    "S3DownloadPath": {
      "Description": "The path where we store all binaries under S3bucketSource",
      "Type": "String",
      "Default": "CWL-consumer"
    },
    "S3bucketBackup": {
      "Description": "The S3 bucket for index backups",
      "Type": "String"
    },
    "S3IndexBackupPath": {
      "Description": "The path where the s3 backup will store indexes",
      "Type": "String",
      "Default": "ELK-index"
    },
    "CloudWatchConsumerCompiledZip": {
      "Description": "The zip file built using maven, which contains jars and configs. Do not include '-cfn.zip' here. The real file should end with -cfn.zip",
      "Type": "String",
      "Default": "cloudwatch-logs-subscription-consumer-1.2.0"
    },
    "Kibana4Filename": {
      "Description": "The Kibana4 archive filename in S3 the bucket. No extention please. The real file ends with .tar.gz",
      "Type": "String",
      "Default": "kibana-4.1.6-linux-x64"
    },
    "Kibana3Filename": {
      "Description": "The Kibana4 archive filename in S3 the bucket. No extention please. The real file ends with .zip",
      "Type": "String",
      "Default": "kibana-3.1.2"
    },
    "ElasticSearchFilename": {
      "Description": "The ElasticSearch rpm filename in S3. No extention pleaase. The real file ends with .rpm ",
      "Type": "String",
      "Default": "elasticsearch-1.7.3.noarch"
    },
    "AWSCloudPluginVersion": {
      "Description": "The ElasticSearch plugin aws-cloud need to match es version. For example, for es 1.7.x, plugin version is 2.7.1",
      "Type": "String",
      "Default": "2.7.1"
    },

    "RetentionDays" : {
      "Description": "Number of days to retain online logs in the Elasticsearch cluster",
      "Type": "Number",
      "Default" : "31",
      "MinValue" : "1"
    },
    "IndexBackupRetentionDays" : {
      "Description": "Number of days to retain index backups on s3",
      "Type": "Number",
      "Default" : "365",
      "MinValue" : "1"
    },

    "SnapRetentionDays" : {
      "Description": "Number of days to retain snapshots of data volume",
      "Type": "Number",
      "Default" : "14",
      "MinValue" : "1"
    },
    "MonitorStack" : {
      "Description": "Push logs from Elasticsearch, Nginx, KCL and CloudFormation to CloudWatch Logs",
      "Type": "String",
      "Default" : "true",
      "AllowedValues" : ["true", "false"]
    },

    "LogFormat" : {
      "Description": "Choose the format that best describes the type of logs in the selected log group",
      "Type": "String",
      "Default" : "Custom",
      "AllowedValues" : ["AmazonVPCFlowLogs", "AWSLambda", "AWSCloudTrail", "Custom"]
    },

    "SubscriptionFilterPattern" : {
      "Description": "Optional filter pattern for custom log formats - Use this only if LogFormat is set to Custom",
      "Type": "String"
    },

    "KinesisShards": {
      "Description": "Number of shards to create for the Kinesis subscription stream",
      "Type": "Number",
      "Default" : "1",
      "MinValue" : "1"
    },

    "ElasticsearchShards": {
      "Description": "The number of primary shards that an Elasticsearch index should have",
      "Type": "Number",
      "Default" : "5",
      "MinValue" : "0"
    },

    "ElasticsearchReplicas": {
      "Description": "The number of replica shards (copies) that each primary Elasticsearch shard should have",
      "Type": "Number",
      "Default" : "1",
      "MinValue" : "0"
    }
  },

  "Mappings" : {
    "Constants" : {
      "S3DownloadPath"   : { "Value": "CWL-consumer" },
      "S3DownloadFile"   : { "Value": "cloudwatch-logs-subscription-consumer-1.2.0" }
    },

    "LogFormats" : {
      "AmazonVPCFlowLogs" : { "Value": "[version, account_id, interface_id, srcaddr, dstaddr, srcport, dstport, protocol, packets, bytes, start, end, action, log_status]" },
      "AWSLambda": { "Value": "[timestamp=*Z, request_id=\"*-*\", event]" },
      "AWSCloudTrail": { "Value": "" },
      "Custom": { "Value": "" }
    }
  },
  
  "Conditions" : {
    "CreateCWLForStack" : {"Fn::Equals" : [{"Ref" : "MonitorStack"}, "true"]},
    "NoKeySpecified" : {"Fn::Equals" : [{"Ref" : "KeyName"}, ""]},
    "CustomLogFormat": {"Fn::Equals" : [{"Ref" : "LogFormat"}, "Custom"]},
    "ESSnapshotIDisSet": {"Fn::Not": [{"Fn::Equals" : [{"Ref" : "ESVolumeSnapshotId"}, ""]}]},
    "EnableAlarms": {"Fn::Not": [{"Fn::Equals": [{ "Ref" : "ManagedServicesTopicARN" }, ""]}]}
  },

  "Resources" : {
      "KCLLeasesTable": {
         "Type": "AWS::DynamoDB::Table",
         "Properties": {
        "TableName": { "Ref": "AWS::StackName" },
          "ProvisionedThroughput" : {
          "ReadCapacityUnits" : "10",
          "WriteCapacityUnits" : "10"
        },
        "AttributeDefinitions" : [
          {
            "AttributeName" : "leaseKey",
            "AttributeType" : "S"   
          }
        ],
        "KeySchema" : [
          {
            "AttributeName" : "leaseKey",
            "KeyType" : "HASH"
          }
        ]
      }
    },

    "KinesisSubscriptionStream": {
      "Type": "AWS::Kinesis::Stream",
      "Properties" :  {
        "ShardCount": { "Ref": "KinesisShards" },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {"Ref": "TagService" },
                  {"Ref": "TagApplication" },
                  {"Ref": "TagEnvironment" },
                  {"Ref": "TagEnvironmentNumber" },
                  {"Ref": "TagRole" },
                  {"Ref": "BuildId" }
                ]
              ]
            }
          },
          {"Key": "Tenant", "Value": {"Ref": "TagTenant" }}, 
          {"Key": "Service","Value": {"Ref": "TagService"}},
          {"Key": "Application","Value": {"Ref": "TagApplication"}},
          {"Key": "Role","Value": {"Ref": "TagRole"}}, 
          {"Key": "Environment","Value": {"Ref": "TagEnvironment"}}
        ]
      }
    },

    "CloudWatchLogsKinesisRole" : {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": { 
                "Service": { "Fn::Join": ["", ["logs.", { "Ref": "AWS::Region" } ,".amazonaws.com" ]]}
            },
            "Action": "sts:AssumeRole"
          }]
        }
      }
    },
    "CrossLogDestination" : {
      "Type" : "AWS::Logs::Destination",
      "Properties" : {
        "DestinationName": { "Fn::Join" : [ "-", ["ELKCrossLogDestination",{"Ref": "BuildId"}]]},
        "RoleArn": { "Fn::GetAtt" : [ "CloudWatchLogsKinesisRole", "Arn" ] },
        "TargetArn": { "Fn::Join" : [ ":", [ "arn", "aws", "kinesis",{ "Ref" : "AWS::Region" },{ "Ref" : "AWS::AccountId" }, { "Fn::Join" : [ "/", [ "stream", { "Ref": "KinesisSubscriptionStream"} ] ] } ] ] },
        "DestinationPolicy": { "Fn::Join" : [ "", ["{\"Version\"  : \"2012-10-17\",\"Statement\" : [{\"Effect\" : \"Allow\", \"Principal\" : {\"AWS\": \"", { "Ref" : "CrossAccountID"} ,"\"},\"Action\" : \"logs:PutSubscriptionFilter\", \"Resource\" : \"arn:aws:logs:",{ "Ref" : "AWS::Region" },":",{ "Ref" : "AWS::AccountId" },":destination:ELKCrossLogDestination-",{"Ref": "BuildId"},"\"}]}" ]]}
      }
    },

    "CloudWatchLogsKinesisPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "CloudWatchLogsKinesisPolicy",
        "Roles": [ { "Ref": "CloudWatchLogsKinesisRole" } ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "kinesis:PutRecord",
              "Resource": { "Fn::Join" : ["", ["arn:aws:kinesis:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":stream/", { "Ref": "KinesisSubscriptionStream"} ]] }
            },
            {
              "Effect": "Allow",
              "Action": "iam:PassRole",
              "Resource": { "Fn::Join" : ["", ["arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":role/", { "Ref": "CloudWatchLogsKinesisRole" } ]] }
            }
          ]
        }
      }
    },

    "ElasticsearchNodeRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [ {
            "Effect" : "Allow",
            "Principal" : {
              "Service" : [ "ec2.amazonaws.com" ]
            },
            "Action" : [ "sts:AssumeRole" ]
          } ]
        },
        "Path" : "/"
      }
    },

    "ElasticsearchRolePolicies" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "elasticsearch-node-policy",
        "PolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [
               {
                  "Action": [
                    "s3:GetBucketLocation",
                    "s3:ListBucket"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": ["",[ "arn:aws:s3:::",{ "Ref": "S3bucketSource" } ] ] }
                },
               {
                  "Action": [
                    "s3:GetBucketLocation",
                    "s3:ListBucket"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": ["",[ "arn:aws:s3:::",{ "Ref": "S3bucketBackup" } ] ] }
                },
               {
                  "Action": [
                    "s3:*"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": ["",[ "arn:aws:s3:::",{ "Ref": "S3bucketBackup" }, "/",{ "Ref": "S3IndexBackupPath" },"*"] ] }
                },
               {
                  "Action": [
                    "s3:*"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": ["",[ "arn:aws:s3:::",{ "Ref": "S3bucketSource" }, "/",{ "Ref": "S3DownloadPath" },"*"] ] }
                },
            {
              "Effect": "Allow",
              "Action": "ec2:*",
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": "dynamodb:*",
              "Resource": { "Fn::Join": ["", ["arn:aws:dynamodb:",{ "Ref": "AWS::Region" },":", {"Ref": "AWS::AccountId"},":table/", { "Ref": "AWS::StackName" } ]]}
            },
            {
              "Effect": "Allow",
              "Action": [
                "kinesis:Get*",
                "kinesis:List*",
                "kinesis:Describe*"
              ],
              "Resource": { "Fn::Join": ["", ["arn:aws:kinesis:", { "Ref": "AWS::Region" }, ":",{"Ref": "AWS::AccountId"},":stream/", { "Ref": "KinesisSubscriptionStream" }]]}
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:*"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": "iam:PassRole",
              "Resource": { "Fn::Join" : ["", ["arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":role/", { "Ref": "CloudWatchLogsKinesisRole" } ]] }
            }
          ]
        },
        "Roles": [ { "Ref": "ElasticsearchNodeRole" } ]
      }
    },

    "ElasticsearchInstanceProfile" : {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "ElasticsearchNodeRole" } ]
      }
    },
    
    "ElasticsearchSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "GroupDescription" : "Enable Elasticsearch access",
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp", 
            "FromPort" : "8080", 
            "ToPort" : "8080",
            "SourceSecurityGroupOwnerId" : {"Fn::GetAtt" : ["ElasticsearchELB", "SourceSecurityGroup.OwnerAlias"]},
            "SourceSecurityGroupId" : { "Ref" : "ElasticsearchELBSecurityGroup" } 
          },
          {
            "IpProtocol" : "tcp", 
            "FromPort" : "22", 
            "ToPort" : "22", 
            "CidrIp" : { "Ref" : "AllowedIpSource" }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {"Ref": "TagService" },
                  {"Ref": "TagApplication" },
                  {"Ref": "TagEnvironment" },
                  {"Ref": "TagEnvironmentNumber" },
                  "essg",
                  {"Ref": "BuildId" }
                ]
              ]
            }
          },
          {"Key": "Tenant", "Value": {"Ref": "TagTenant" }}, 
          {"Key": "Service","Value": {"Ref": "TagService"}},
          {"Key": "Application","Value": {"Ref": "TagApplication"}},
          {"Key": "Role","Value": {"Ref": "TagRole"}}, 
          {"Key": "Environment","Value": {"Ref": "TagEnvironment"}}
        ]
      }
    },

    "ElasticsearchSecurityGroupIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref": "ElasticsearchSecurityGroup" },
        "IpProtocol" : "tcp", 
        "FromPort" : "9300", 
        "ToPort" : "9399",
        "SourceSecurityGroupId" : { "Ref" : "ElasticsearchSecurityGroup" },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {"Ref": "TagService" },
                  {"Ref": "TagApplication" },
                  {"Ref": "TagEnvironment" },
                  {"Ref": "TagEnvironmentNumber" },
                  {"Ref": "TagRole" },
                  {"Ref": "BuildId" }
                ]
              ]
            }
          },
          {"Key": "Tenant", "Value": {"Ref": "TagTenant" }}, 
          {"Key": "Service","Value": {"Ref": "TagService"}},
          {"Key": "Application","Value": {"Ref": "TagApplication"}},
          {"Key": "Role","Value": {"Ref": "TagRole"}}, 
          {"Key": "Environment","Value": {"Ref": "TagEnvironment"}}
        ]
      }
    }, 

    "ElasticsearchELBSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "GroupDescription" : "Enable restricted ELB access",
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp", 
            "FromPort" : "443", 
            "ToPort" : "443",
            "CidrIp" : { "Ref" : "AllowedIpSource" }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {"Ref": "TagService" },
                  {"Ref": "TagApplication" },
                  {"Ref": "TagEnvironment" },
                  {"Ref": "TagEnvironmentNumber" },
                  "ELB",
                  {"Ref": "BuildId" }
                ]
              ]
            }
          },
          {"Key": "Tenant", "Value": {"Ref": "TagTenant" }}, 
          {"Key": "Service","Value": {"Ref": "TagService"}},
          {"Key": "Application","Value": {"Ref": "TagApplication"}},
          {"Key": "Role","Value": {"Ref": "TagRole"}}, 
          {"Key": "Environment","Value": {"Ref": "TagEnvironment"}}
        ]
      }
    },

    "ElasticsearchServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "VPCZoneIdentifier" : [{ "Ref" : "SubnetA" }, { "Ref" : "SubnetB" }],
        "LaunchConfigurationName" : { "Ref" : "ElasticsearchServer" },
        "LoadBalancerNames": [  { "Ref": "ElasticsearchELB" } ],
        "MinSize" : "1",
        "MaxSize" : "10",
        "DesiredCapacity" : { "Ref" : "ClusterSize" },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "TagTenant"
                  },
                  {
                    "Ref": "TagService"
                  },
                  {
                    "Ref": "TagApplication"
                  },
                  {
                    "Ref": "TagEnvironment"
                  },
                  {
                    "Ref": "TagRole"
                  },
                  {
                    "Ref": "BuildId"
                  }
                ]
              ]
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "type",
            "Value": "elasticsearch",
            "PropagateAtLaunch": "true"
          },
          {
          "Key": "Tenant",
          "Value": {
            "Ref": "TagTenant"
          },
          "PropagateAtLaunch": "true"
          }, {
          "Key": "Service",
          "Value": {
            "Ref": "TagService"
          },
          "PropagateAtLaunch": "true"
          }, {
          "Key": "Application",
          "Value": {
            "Ref": "TagApplication"
          },
          "PropagateAtLaunch": "true"
          }, {
          "Key": "Role",
          "Value": {
            "Ref": "TagRole"
          },
          "PropagateAtLaunch": "true"
          }, {
          "Key": "Environment",
          "Value": {
            "Ref": "TagEnvironment"
          },
          "PropagateAtLaunch": "true"
         }
        ]
      }
    },

    "ElasticsearchELB" : {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "Subnets" : [{ "Ref" : "SubnetA" }, { "Ref" : "SubnetB" }],
        "CrossZone" : "true",
        "Scheme": "internal",
        "SecurityGroups": [ { "Fn::GetAtt" : [ "ElasticsearchELBSecurityGroup", "GroupId" ] } ],
        "Listeners" : [ {
          "LoadBalancerPort" : "443",
          "InstancePort" : "8080",
          "Protocol" : "HTTPS",
          "SSLCertificateId": {
              "Ref": "ELBSSLCertificate"
            }
        } ],
        "HealthCheck" : {
          "Target" : "TCP:8080",
          "HealthyThreshold" : 3,
          "UnhealthyThreshold" : 2,
          "Interval": 10,
          "Timeout": 5
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "TagTenant"
                  },
                  {
                    "Ref": "TagService"
                  },
                  {
                    "Ref": "TagApplication"
                  },
                  {
                    "Ref": "TagEnvironment"
                  },
                  "ElasticsearchELB",
                  {
                    "Ref": "BuildId"
                  }
                ]
              ]
            }
          },
          {"Key": "Tenant", "Value": {"Ref": "TagTenant" }}, 
          {"Key": "Service","Value": {"Ref": "TagService"}},
          {"Key": "Application","Value": {"Ref": "TagApplication"}},
          {"Key": "Role","Value": {"Ref": "TagRole"}}, 
          {"Key": "Environment","Value": {"Ref": "TagEnvironment"}}
        ]
      }
    },

    "ElasticsearchServer": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "commands" : {
              "00_copyNginxConfig": {
                "command": { "Fn::Join" : ["", [
                  "cp ./", { "Ref" :"CloudWatchConsumerCompiledZip"} ,"/configuration/nginx/nginx.conf /etc/nginx/nginx.conf"
                 ]]}
              },
              "01_copyElasticsearchTemplates": {
                "command": { "Fn::Join" : ["", [
                  "cp -R ./", { "Ref" :"CloudWatchConsumerCompiledZip"} ,"/configuration/elasticsearch/* /etc/elasticsearch/"
                ]]}
              },
              "02_updateESConfigForNode": {
                "command": { "Fn::Join" : ["", [
                  "echo \"",
                  "node.name: $(curl -silent http://169.254.169.254/latest/dynamic/instance-identity/document 2>/dev/null ",
                  "| grep instanceId ",
                  "| awk -F\\\" '{print $4}')",
                  "\" >> /etc/elasticsearch/elasticsearch.yml && ",
                  "echo \"",
                  "node.rack: $(curl -silent http://169.254.169.254/latest/dynamic/instance-identity/document 2>/dev/null ",
                  "| grep availabilityZone ",
                  "| awk -F\\\" '{print $4}')",
                  "\" >> /etc/elasticsearch/elasticsearch.yml"
                ]]}
              },
              "03_installESPlugins": {
                "command": { "Fn::Join" : ["", [
                  "/usr/share/elasticsearch/bin/plugin -install elasticsearch/elasticsearch-cloud-aws/", { "Ref": "AWSCloudPluginVersion" } ,
                  " && ",
                  "/usr/share/elasticsearch/bin/plugin install lmenezes/elasticsearch-kopf/1.0"
                ]]}
              },
              "04_nginxAuthConfig": {
                "command": { "Fn::Join" : ["", [ 
                  "htpasswd -c -b /etc/nginx/.htpasswd ", 
                  { "Ref": "NginxUsername" }, " ", 
                  { "Ref": "NginxPassword" }, "\n"
                 ]]}
              },
              "05_startKCL": {
                "command": { "Fn::Join" : ["", [
                  "{ nohup java -DkinesisInputStream=", { "Ref": "KinesisSubscriptionStream" },
                    " -DregionName=", { "Ref": "AWS::Region" },
                    " -DappName=", { "Ref": "KCLLeasesTable" },
                    " -Dlog4j.configuration=log4j-prod.properties",
                    " -DelasticsearchClusterName=elasticsearch",
                    " -cp ", { "Ref" :"CloudWatchConsumerCompiledZip"} ,"/", { "Ref" :"CloudWatchConsumerCompiledZip"} ,".jar",
                    " com.amazonaws.services.logs.connectors.samples.elasticsearch.ElasticsearchConnector",
                    " > /dev/null 2>&1 & } && disown -h %1"
                  ]]},
                "cwd": "~"
              },
              "06_startKibana4": {
                "command": { "Fn::Join" : ["", [ "{ nohup ./",{ "Ref" :"Kibana4Filename"},"/bin/kibana > /dev/null 2>&1 & } && disown -h %1"]]},
                "cwd": "~"
              },
              "07_getPipAndCurator": {
                "command": "pip install elasticsearch-curator"
              },
              "08_CWLStateDir" : {
                "command" : "mkdir -p /var/awslogs/state"
              }
            },

            "files": {
              "/etc/elasticsearch/elasticsearch.yml" : {
                "content" : { "Fn::Join" : ["", [
                  "cloud.aws.region:\n",
                  " ", { "Ref" : "AWS::Region" }, "\n",
                  "discovery:\n",
                  " type: ec2\n",
                  "\n",
                  "discovery.ec2.groups: ", { "Ref" : "ElasticsearchSecurityGroup" }, "\n",
                  "discovery.ec2.tag.type: elasticsearch\n",
                  "\n",
                  "cloud.node.auto_attributes: true\n"
                ]]}
              },
              "/etc/elasticsearch/snapshot.sh": {
                "content": { "Fn::Join" : ["", [
                  "#!/bin/bash -x\n\n",
                  "REGION=",{ "Ref" : "AWS::Region" }, "\n",
                  "datetag=`date -Is`\n",
                  "nametag=\"$datetag-\"",
                     {"Ref": "TagService"},"-",
                     {"Ref": "TagApplication"},"-",
                     {"Ref": "TagEnvironment"},"-",
                     {"Ref": "TagEnvironmentNumber"},"-",
                     {"Ref": "TagRole"},"-",
                     {"Ref": "BuildId"},"\n",
                  "instanceid=`curl -s -L http://169.254.169.254/latest/meta-data/instance-id`\n",
                  "volumeLid=`aws --region=$REGION ec2 describe-volumes --filters Name=attachment.instance-id,Values=$instanceid --query Volumes[].Attachments[].[VolumeId,Device] --output text | grep sdl | awk '{print $1}'`\n",
                  "snapid=`aws --region=$REGION ec2 create-snapshot --volume-id $volumeLid --description \"ELK volume /dev/sdl InstanceId:$instanceid\" --query SnapshotId --output text`\n",
                  "aws ec2 --region=$REGION create-tags --resources $snapid --tags Key=Name,Value=$nametag\n",
                  "aws ec2 --region=$REGION create-tags --resources $snapid --tags Key=Tenant,Value='",{ "Ref" : "TagTenant" },"'\n",
                  "aws ec2 --region=$REGION create-tags --resources $snapid --tags Key=Service,Value='",{ "Ref" : "TagService" },"'\n",
                  "aws ec2 --region=$REGION create-tags --resources $snapid --tags Key=Application,Value='",{ "Ref" : "TagApplication" },"'\n",
                  "aws ec2 --region=$REGION create-tags --resources $snapid --tags Key=Role='",{ "Ref" : "TagRole" },"'\n",
                  "aws ec2 --region=$REGION create-tags --resources $snapid --tags Key=Environment,Value='",{ "Ref" : "TagEnvironment" },"'\n",
                  "#\n",
                  "snaplist=`aws ec2 --region=ap-southeast-2 describe-snapshots --filters Name=tag-value,Values=",{ "Ref" : "AWS::StackName" }," --query Snapshots[].[StartTime,SnapshotId] --output text`\n",
                  "IFS=$'\n'\n",
                  "olderthandatenum=`date +'%Y%m%d' -d '",{ "Ref" : "SnapRetentionDays" }," days ago'`\n",
                  "for snap in $snaplist; do\n",
                  "   snapid=`echo $snap | awk '{print $2}'`\n",
                  "   snapdate=`echo $snap | awk '{print $1}'`\n",
                  "   snapdatenum=`date -d \"$snapdate\" +'%Y%m%d'`\n",
                  "   if (( $snapdatenum < $olderthandatenum )); then\n",
                  "     echo \"deleting $snapid\" \n",
                  "     aws --region=$REGION ec2 delete-snapshot --snapshot-id $snapid \n",
                  "   fi\n",
                  "done\n"
                  ]]},
                  "mode"  : "000755"
              },
              "/etc/elasticsearch/inits3backup.sh": {
                "content": { "Fn::Join" : ["", [
                  "#!/bin/bash -x\n\n",
                  "until curl -XPUT 'http://localhost:9200/_snapshot/s3_dev_backup' -d '{\n",
                  "    \"type\": \"s3\",\n",
                  "    \"settings\": {\n",
                  "        \"bucket\": \"",{ "Ref" : "S3bucketBackup" },"\",\n",
                  "        \"region\": \"",{ "Ref": "AWS::Region" },"\",\n",
                  "        \"base_path\": \"",{ "Ref" : "S3IndexBackupPath" },"\",\n",
                  "        \"max_retries\": 3\n",
                  "     }\n",
                  "}'; do sleep 10; done\n",
                  "\n"
                  ]]},
                  "mode"  : "000755"
              },
              "/etc/elasticsearch/s3backup.sh": {
                "content": { "Fn::Join" : ["", [
                  "#!/bin/bash -x\n\n",
                  "#indiceslist=`curl -s http://localhost:9200/_cat/indices | awk '{print $3}'`\n",
                  "yesterday=`date +%Y.%m.%d -d 'yesterday'`\n",
                  "indiceslist=cwl-$yesterday\n",
                  "for index in $indiceslist; do list=\"$list,$index\"; done\n",
                  "list=`echo $list | sed 's/^,//'`\n",
                  "date=`date +%Y.%m.%d`\n",
                  "rand=`awk 'BEGIN{srand();print int(rand()*(30))+1 }'`\n",
                  "echo \"Sleeping for random $rand seconds\"\n",
                  "sleep $rand\n",
                  "curl -XPUT \"http://localhost:9200/_snapshot/s3_dev_backup/$date?wait_for_completion=true\" -d \"{\n",
                  "    \\\"indices\\\": \\\"$list\\\",\n",
                  "    \\\"ignore_unavailable\\\": true,\n",
                  "    \\\"include_global_state\\\": false\n",
                  "}\"\n",
                  "#remove index backup  older than specified below days\n",
                  "olderthandate=`date +%Y.%m.%d -d '",{ "Ref" : "IndexBackupRetentionDays" }," days ago'`\n",
                  "curl -XDELETE \"http://localhost:9200/_snapshot/s3_dev_backup/$olderthandate\"\n",
                  "\n"
                  ]]},
                  "mode"  : "000755"
              },
              "/etc/elasticsearch/startLogConsumer.sh": {
                "content": { "Fn::Join" : ["", [
                  "#!/bin/bash -x\n\n",
                  "cd /root/",
                  "{ nohup java -DkinesisInputStream=", { "Ref": "KinesisSubscriptionStream" },
                    " -DregionName=", { "Ref": "AWS::Region" },
                    " -DappName=", { "Ref": "KCLLeasesTable" },
                    " -Dlog4j.configuration=log4j-prod.properties",
                    " -DelasticsearchClusterName=elasticsearch",
                    " -cp ", { "Ref" :"CloudWatchConsumerCompiledZip"} ,"/", { "Ref" :"CloudWatchConsumerCompiledZip"} ,".jar",
                    " com.amazonaws.services.logs.connectors.samples.elasticsearch.ElasticsearchConnector",
                    " > /dev/null 2>&1 & } && disown -h %1"
                  ]]}
              },
              "/etc/logrotate.d/elasticsearch": {
                   "content": { "Fn::Join" : ["", [
                  "/var/log/elasticsearch/elasticsearch_index_indexing_slowlog.log\n",
                  "/var/log/elasticsearch/elasticsearch_index_search_slowlog.log\n",
                  "/var/log/elasticsearch/elasticsearch.log\n",
                  "{\n",
                  "    daily\n",
                  "    rotate 5\n",
                  "    copytruncate\n",
                  "    dateext\n",
                  "    compress\n",
                  "}\n"
                ]]}
              },
              "/etc/logrotate.d/cloudwatch-logs-subscription-consumer": {
                   "content": { "Fn::Join" : ["", [
                  "/var/log/cloudwatch-logs-subscription-consumer.log\n",
                  "{\n",
                  "    daily\n",
                  "    rotate 5\n",
                  "    copytruncate\n",
                  "    dateext\n",
                  "    compress\n",
                  "}\n"
                ]]}
              }
            },

            "services": {
              "sysvinit": {
                "nginx": {
                  "enabled": true,
                  "ensureRunning": true,
                  "files": [ "/etc/nginx/nginx.conf" ],
                  "sources": [ "usr/share/nginx/html" ]
                },
                "elasticsearch": {
                  "enabled": true,
                  "ensureRunning": true,
                  "files": [ "/etc/elasticsearch/elasticsearch.yml", "/etc/elasticsearch/logging.yml", "/etc/sysconfig/elasticsearch" ],
                  "sources": [ "/usr/share/elasticsearch/bin" ]
                },
                "awslogs": {
                  "Fn::If": [
                    "CreateCWLForStack",
                    {
                      "enabled" : "true", 
                      "ensureRunning" : "true",
                      "files" : [ "/etc/awslogs/awslogs.conf" ]
                    },
                    "AWS::NoValue"
                  ]
                }
              }
            }
          }
        }
      },

      "Properties": {
        "ImageId" : { "Ref" : "AMIID" },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [
             {"Ref" : "ElasticsearchSecurityGroup"}, 
             {"Ref": "NATSecurityGroup"},
             {"Ref": "DefaultSecurityGroup"}
        ],
        "KeyName"        : { "Ref" : "KeyName" },
        "IamInstanceProfile" : { "Ref" : "ElasticsearchInstanceProfile" },
        "AssociatePublicIpAddress" : false,
        "BlockDeviceMappings" : [ {
            "DeviceName" : "/dev/sdl",
            "Ebs" : {
              "Fn::If": ["ESSnapshotIDisSet",
              {
                "VolumeSize" : {"Ref":"ESVolumeSize"},
                "SnapshotId" : {"Ref":"ESVolumeSnapshotId"},
                "Encrypted" : true,
                "DeleteOnTermination": false,
                "VolumeType" : "gp2"
              }, 
              {
                "VolumeSize" : {"Ref":"ESVolumeSize"},
                "Encrypted" : true,
                "DeleteOnTermination": false,
                "VolumeType" : "gp2"
              }
            ]
          } 
        } ],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -ex\n",
                "mkdir /var/lib/elasticsearch\n",
                "#initialise data volume\n",
                "mkfs.ext4 /dev/xvdl\n",
                "mount /dev/xvdl /var/lib/elasticsearch\n",
                "echo '/dev/xvdl       /var/lib/elasticsearch   ext4    defaults        0       2' >> /etc/fstab \n",
                "#\n",
                "REGION=\"",{ "Ref": "AWS::Region" },"\"\n",
                "export AWS_REGION=$REGION\n",
                "export AWS_DEFAULT_REGION=$REGION\n",
                "\n",
                "httpproxyhost='",{ "Ref": "HttpProxyHost" },"'\n",
                "httpproxyport='",{ "Ref": "HttpProxyPort" },"'\n",
                "if [ ! \"$httpproxyhost\" = \"none\" ]; then \n",
                "   cat > /etc/profile.d/proxy.sh << EOF\n",
                "export http_proxy=http://$httpproxyhost:$httpproxyport\n",
                "export https_proxy=https://$httpproxyhost:$httpproxyport\n",
                "export no_proxy=\"169.254.169.254,localhost,127.0.0.1,.",{ "Ref": "S3bucketSource" },",s3-$REGION.amazonaws.com\"\n",
                "export HTTP_PROXY=http://$httpproxyhost:$httpproxyport\n",
                "export HTTPS_PROXY=https://$httpproxyhost:$httpproxyport\n",
                "export JAVA_OPTS=\"-DproxyHost=$httpproxyhost -DproxyPort=$httpproxyport\"\n",
                "export NO_PROXY=\"169.254.169.254,localhost,127.0.0.1,.",{ "Ref": "S3bucketSource" },",s3-$REGION.amazonaws.com\"\n",
                "EOF\n",
                "   chmod 755 /etc/profile.d/proxy.sh\n",
                "   source /etc/profile.d/proxy.sh\n",
                "   /bin/cp -fr /etc/profile.d/proxy.sh /var/awslogs/etc/proxy.conf\n",
                "fi\n",
          "#Install few required yums\n",
          "until yum install -y nginx httpd python-pip java; do sleep 10; done\n",
          "\n",
          "\n",
          "\n",
          "cd ~\n",
          "#Get elasticsearch RPM\n",
          "aws s3 cp s3://",{"Ref": "S3bucketSource"},"/", { "Ref" : "S3DownloadPath" } ,"/", { "Ref" :"ElasticSearchFilename"} ,".rpm .\n",
          "yum install -y ",{ "Ref" :"ElasticSearchFilename"} ,".rpm\n",

          "# KCL and config files\n",
          "aws s3 cp s3://",{"Ref": "S3bucketSource"},"/", { "Ref" : "S3DownloadPath" } ,"/", { "Ref" :"CloudWatchConsumerCompiledZip"} ,"-cfn.zip .\n",
          "unzip ", { "Ref" :"CloudWatchConsumerCompiledZip"} ,"-cfn.zip\n",

          "# Get Kibana 4\n",
          "aws s3 cp s3://",{"Ref": "S3bucketSource"},"/", { "Ref" : "S3DownloadPath" } ,"/",{"Ref": "Kibana4Filename"},".tar.gz .\n",
          "tar -xf ",{"Ref": "Kibana4Filename"},".tar.gz\n",

          "# Config\n",
          "cfn-init -s ", { "Ref" : "AWS::StackId" }, " -r ElasticsearchServer ",
          "    --region ", { "Ref" : "AWS::Region" }, " -v\n",

          "# Allow 60% of total mem as heap size for cluster \n",
          "freemem=$(free -m | grep Mem | awk '{ printf \"%1.0f\\n\", 0.6*$2; }')",
          " && sed -i \"s/#ES_HEAP_SIZE=.*/ES_HEAP_SIZE=$(echo $freemem)m/g\" /etc/sysconfig/elasticsearch\n",

          "# Get Kibana 3\n",
          "aws s3 cp s3://",{"Ref": "S3bucketSource"},"/", { "Ref" : "S3DownloadPath" } ,"/",{"Ref": "Kibana3Filename"},".zip .\n",
          "unzip ",{"Ref": "Kibana3Filename"},".zip\n",
          "mkdir -p /usr/share/nginx/html/kibana3\n",
          "mv ",{"Ref": "Kibana3Filename"},"/* /usr/share/nginx/html/kibana3\n",
          "sed -i 's/elasticsearch:.*/elasticsearch: \"http:\\/\\/\" + window.location.hostname,/g' /usr/share/nginx/html/kibana3/config.js || error_exit \"Failed to update Kibana 3 config\"\n",

          "# Add static Kibana 3 dashboards\n",
          "cp -f ", { "Ref" :"CloudWatchConsumerCompiledZip"} ,"/configuration/kibana/* /usr/share/nginx/html/kibana3/app/dashboards/ || error_exit \"Failed to copy the Kibana 3 static dashboards\" \n",

          "# Update Elasticsearch index templates\n",
          "sed -i '5i\\ \\ \\ \\ \\ \\ \"index.number_of_replicas\" : ", { "Ref": "ElasticsearchReplicas" } ,",' /etc/elasticsearch/templates/cwl_template.json || error_exit \"Failed update cwl_template.json\"\n",
          "sed -i '5i\\ \\ \\ \\ \\ \\ \"number_of_shards\" : ", { "Ref": "ElasticsearchShards" } ,",' /etc/elasticsearch/templates/cwl_template.json || error_exit \"Failed update cwl_template.json\"\n",
          "sed -i '5i\\ \\ \\ \\ \\ \\ \"index.number_of_replicas\" : ", { "Ref": "ElasticsearchReplicas" } ,",' /etc/elasticsearch/templates/kibana3_template.json || error_exit \"Failed update kibana3_template.json\"\n",
          "sed -i '5i\\ \\ \\ \\ \\ \\ \"index.number_of_replicas\" : ", { "Ref": "ElasticsearchReplicas" } ,",' /etc/elasticsearch/templates/kibana4_template.json || error_exit \"Failed update kibana4_template.json\"\n",

          "# Set hourly cron for curator\n",
          "echo \"0 * * * * /usr/local/bin/curator --host localhost --port 9200 --debug delete indices --prefix \\\"cwl-\\\" --time-unit days --older-than ",
          { "Ref" : "RetentionDays" },
          " --timestring \\\"\\%Y.\\%m.\\%d\\\"\" >> mycron || error_exit \"Failed to create cron file\" \n",

          "crontab mycron && rm -f mycron || error_exit \"Failed to set cron \" \n",

          "# Subscribe the s3 bucket\n",
          "/etc/elasticsearch/inits3backup.sh\n",
          "# Set cron for Volume Snapshots\n",
          "crontab -l > snapcron\n",
          "echo \"0 1 * * * /etc/elasticsearch/snapshot.sh\" >> snapcron && crontab snapcron && rm -f snapcron\n",
          "# Set cron for s3 backups\n",
          "crontab -l > snapcron\n",
          "echo \"0 11 * * * /etc/elasticsearch/s3backup.sh\" >> snapcron && crontab snapcron && rm -f snapcron\n",
          "# Try to register CloudWatch subscription filters\n",
          "cat > /etc/subscribefilters.sh << 'EOF'\n",
          "#!/bin/bash -ex\n",
          "#This script is disabled! Use as example ONLY. Lyu \n",
          "#filter='",{"Ref": "LogGroupNameRegex"},"'\n",
          "#loggroups=`aws logs describe-log-groups --query logGroups[].logGroupName | awk -F'\"' '{print $2}' | grep -v '^$' | grep \"$filter\"`\n",
          "#for group in $loggroups; do\n",
          "# aws logs put-subscription-filter \\\n",
          "#   --log-group-name \"$group\" \\\n",
          "#   --filter-name \"ELK-filter-$group\" \\\n",
          "#   --destination-arn '",{ "Fn::Join" : [ ":", [ "arn", "aws", "kinesis",{ "Ref" : "AWS::Region" },{ "Ref" : "AWS::AccountId" }, { "Fn::Join" : [ "/", [ "stream", { "Ref": "KinesisSubscriptionStream"} ] ] } ] ] },"' \\\n",
          "#   --filter-pattern '' \\\n",
          "#   --role-arn '",{ "Fn::GetAtt" : [ "CloudWatchLogsKinesisRole", "Arn" ] },"'\n",
          "#done\n",
          "EOF\n",
          "\n",
          "#Add selinux modules\n",
          "setenforce 0\n",
          "#curl -L -v -u ",{"Ref":"NginxUsername"},":",{"Ref":"NginxPassword"}," http://127.0.0.1:8080/kibana4/\n",
          "#curl -L -v -u ",{"Ref":"NginxUsername"},":",{"Ref":"NginxPassword"}," http://127.0.0.1:8080/kibana3/\n",
          "#sleep 2\n",
          "#grep nginx /var/log/audit/audit.log | audit2allow -M nginx && semodule -i nginx.pp\n",
          "\n",
          "sed -i 's/ENV/",{"Ref": "TagEnvironment"},"/' /var/awslogs/etc/awslogs.conf\n",
          "cat << EOF >> /var/awslogs/etc/awslogs.conf\n",
          "\n",
          "[/var/log/elasticsearch/elasticsearch.log]\n",
          "file = /var/log/elasticsearch/elasticsearch.log\n",
          "log_group_name = ELK\n",
          "log_stream_name = {instance_id}\n",
          "\n",
          "[/var/log/nginx/access.log]\n",
          "file = /var/log/nginx/access.log\n",
          "log_group_name = ELK\n",
          "log_stream_name = {instance_id}\n",
          "\n",
          "[/var/log/nginx/error.log]\n",
          "file = /var/log/nginx/error.log\n",
          "log_group_name = ELK\n",
          "log_stream_name = {instance_id}\n",
          "\n",
          "[/var/log/cloudwatch-logs-subscription-consumer.log]\n",
          "file = /var/log/cloudwatch-logs-subscription-consumer.log\n",
          "log_group_name = ELK\n",
          "log_stream_name = {instance_id}\n",
          "EOF\n",
          "/etc/init.d/awslogs restart\n",
          "#\n",
          "#bash -x /etc/subscribefilters.sh\n",
          "\n"
        ]]}}
      }
    },

    "ELBRoute53Record": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": {
          "Ref": "DNSZoneId"
        },
        "Comment": "ELK Cluster ELB Record",
        "Name": {
          "Fn::Join": [ "",[ "TU-Logs-",{"Ref": "BuildId"},".",{"Ref": "DNSDomain"},"."] ] },
        "Type": "CNAME",
        "TTL": "60",
        "ResourceRecords": [
          {
            "Fn::GetAtt": ["ElasticsearchELB", "DNSName" ]
          }
        ]
      }
    },
    "InstanceCPULoadAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Condition": "EnableAlarms",
      "Properties" : {
        "AlarmDescription" : "Alarm when CPU usage is above 90%",
        "Namespace" : "AWS/EC2",
        "MetricName" : "CPUUtilization",
        "Statistic" : "Average",
        "Period" : "300",
        "Threshold" : "90",
        "Unit" : "Percent",
        "ComparisonOperator" : "GreaterThanThreshold",
        "EvaluationPeriods" : "1",
        "Dimensions" : [ {
            "Name" : "AutoScalingGroupName",
            "Value" : { "Ref" : "ElasticsearchServerGroup" }
          } ],
        "AlarmActions" : [ {  "Ref" : "ManagedServicesTopicARN" } ],
        "OKActions" : [ {  "Ref" : "ManagedServicesTopicARN" } ]
      }
    },
    "StatusCheckFailedAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Condition": "EnableAlarms",
      "Properties" : {
        "AlarmDescription" : "Alarm when either StatusCheckFailed_System or StatusCheckFailed_Instance returns a failure",
        "Namespace" : "AWS/EC2",
        "MetricName" : "StatusCheckFailed",
        "Statistic" : "Sum",
        "Period" : "300",
        "Threshold" : "1",
        "Unit" : "Count",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Dimensions" : [ {
            "Name" : "AutoScalingGroupName",
            "Value" : { "Ref" : "ElasticsearchServerGroup" }
          } ],
        "AlarmActions" : [ {  "Ref" : "ManagedServicesTopicARN" } ],
        "OKActions" : [ {  "Ref" : "ManagedServicesTopicARN" } ]
      }
    },
    "UnHealthyHostAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Condition": "EnableAlarms",
      "Properties" : {
        "AlarmDescription" : "Alarm when Unhealthy application servers exist.",
        "Namespace" : "AWS/ELB",
        "MetricName" : "UnHealthyHostCount",
        "Statistic" : "Sum",
        "Period" : "60",
        "Threshold" : "1",
        "Unit" : "Count",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Dimensions" : [ {
          "Name" : "LoadBalancerName",
          "Value" : { "Ref" : "ElasticsearchELB"}
        } ],
        "AlarmActions" : [ {  "Ref" : "ManagedServicesTopicARN" } ],
        "OKActions" : [ {  "Ref" : "ManagedServicesTopicARN" } ]
      }
    },
    "SpillOverCountAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Condition": "EnableAlarms",
      "Properties" : {
        "AlarmDescription" : "Alarm when the load balancer queue is full and can't serve request, Client will get a 503 error..",
        "Namespace" : "AWS/ELB",
        "MetricName" : "SpillOverCount",
        "Statistic" : "Sum",
        "Period" : "60",
        "Threshold" : "1",
        "Unit" : "Count",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Dimensions" : [ {
          "Name" : "LoadBalancerName",
          "Value" : { "Ref" : "ElasticsearchELB"}
        } ],
        "AlarmActions" : [ {  "Ref" : "ManagedServicesTopicARN" } ],
        "OKActions" : [ {  "Ref" : "ManagedServicesTopicARN" } ]
      }
    },
    "LatencyAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Condition": "EnableAlarms",
      "Properties" : {
        "AlarmDescription" : "Alarm when the back end applications take longer then 500ms to respond.",
        "Namespace" : "AWS/ELB",
        "MetricName" : "Latency",
        "Statistic" : "Average",
        "Period" : "60",
        "Threshold" : "500",
        "Unit" : "Milliseconds",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Dimensions" : [ {
          "Name" : "LoadBalancerName",
          "Value" : { "Ref" : "ElasticsearchELB"}
        } ],
        "AlarmActions" : [ {  "Ref" : "ManagedServicesTopicARN" } ],
        "OKActions" : [ {  "Ref" : "ManagedServicesTopicARN" } ]
      }
    },
    "HTTPCodeELB5xx" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Condition": "EnableAlarms",
      "Properties" : {
        "AlarmDescription" : "Alarm when the load balancer Delivers 5xx errors to clients",
        "Namespace" : "AWS/ELB",
        "MetricName" : "HTTPCode_ELB_5XX",
        "Statistic" : "Sum",
        "Period" : "60",
        "Threshold" : "1",
        "Unit" : "Count",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Dimensions" : [ {
          "Name" : "LoadBalancerName",
          "Value" : { "Ref" : "ElasticsearchELB"}
        } ],
        "AlarmActions" : [ {  "Ref" : "ManagedServicesTopicARN" } ],
        "OKActions" : [ {  "Ref" : "ManagedServicesTopicARN" } ]
      }
    },
    "HTTPCode4xxBackendAlert" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Condition": "EnableAlarms",
      "Properties" : {
        "AlarmDescription" : "Alarm when the load balancer receives 4xx errors from the backend servers.",
        "Namespace" : "AWS/ELB",
        "MetricName" : "HTTPCode_Backend_4XX",
        "Statistic" : "Sum",
        "Period" : "60",
        "Threshold" : "1",
        "Unit" : "Count",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Dimensions" : [ {
          "Name" : "LoadBalancerName",
          "Value" : { "Ref" : "ElasticsearchELB"}
        } ],
        "AlarmActions" : [ {  "Ref" : "ManagedServicesTopicARN" } ],
        "OKActions" : [ {  "Ref" : "ManagedServicesTopicARN" } ]
      }
    },
    "HTTPCode5xxBackendAlert" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Condition": "EnableAlarms",
      "Properties" : {
        "AlarmDescription" : "Alarm when the load balancer receives 5xx errors from the backend servers.",
        "Namespace" : "AWS/ELB",
        "MetricName" : "HTTPCode_Backend_5XX",
        "Statistic" : "Sum",
        "Period" : "60",
        "Threshold" : "1",
        "Unit" : "Count",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Dimensions" : [ {
          "Name" : "LoadBalancerName",
          "Value" : { "Ref" : "ElasticsearchELB" }
        } ],
        "AlarmActions" : [ {  "Ref" : "ManagedServicesTopicARN" } ],
        "OKActions" : [ {  "Ref" : "ManagedServicesTopicARN" } ]
      }
    }
  },

  "Outputs" : {
    "Kibana3" : {
      "Description" : "Kibana 3 (Includes Sample Dashboards)",
      "Value" :  {"Fn::Join": ["",["http://TU-Logs-",{"Ref": "BuildId"},".",{"Ref": "DNSDomain" }, "/kibana3/#"]]}
    },
    "Kibana4" : {
      "Description" : "Kibana 4",
      "Value" :  { "Fn::Join" : ["",["http://TU-Logs-",{"Ref": "BuildId"},".",{"Ref": "DNSDomain" }, "/kibana4/#"]]}
    },
    "Elasticsearch" : {
      "Description" : "Elasticsearch API",
      "Value" :  { "Fn::Join" : ["",["http://TU-Logs-",{"Ref": "BuildId"},".",{"Ref": "DNSDomain" }, "/?pretty"]]}
    },
    "Kopf" : {
      "Description" : "Kopf Admin Tool",
      "Value" :  { "Fn::Join" : ["",["http://TU-Logs-",{"Ref": "BuildId"},".",{"Ref": "DNSDomain" }, "/_plugin/kopf"]]}
    },
    "KinesisARN" : {
      "Description" : "Use this ARN to point the subscription filters to",
      "Value" :  { "Fn::Join" : [ ":", [ "arn", "aws", "kinesis",{ "Ref" : "AWS::Region" },{ "Ref" : "AWS::AccountId" }, { "Fn::Join" : [ "/", [ "stream", { "Ref": "KinesisSubscriptionStream"} ] ] } ] ] }
    },
    "RoleARN" : {
      "Description" : "role-arn for the subsctiontion ",
      "Value" :  { "Fn::GetAtt" : [ "CloudWatchLogsKinesisRole", "Arn" ] }
    },
    "CrossDestinationARN" : {
      "Description" : "role-arn for the subsctiontion ",
      "Value" :  { "Fn::Join" : ["",["arn:aws:logs:",{ "Ref" : "AWS::Region" },":",{ "Ref" : "AWS::AccountId" },":destination:ELKCrossLogDestination-",{"Ref": "BuildId"}]]}
    }
  }
}
