{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "A sample Elasticsearch/Kibana stack that hooks up with real-time data from CloudWatch Logs using a Subscription Filter. **NOTE** This template creates one or more Amazon EC2 instances, an Amazon Kinesis stream and an Elastic Load Balancer. You will be billed for the AWS resources used if you create a stack from this template. This template requires setting the \"Create IAM resources\" parameter to True.",

  "Parameters" : {

    "KeyName": {
      "Description" : "The name of an existing key pair to enable SSH access to the EC2 instances",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },

    "InstanceType" : {
      "Description" : "EC2 instance type for the Elasticsearch nodes",
      "Type" : "String",
      "Default" : "t2.medium",
      "AllowedValues" : [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10clarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "cr1.8xlarge",
        "cc2.8xlarge"
       ],
      "ConstraintDescription" : "Must be a valid EC2 instance type"
    },
    "ELBAllowedRange1": {
      "Description": "Allowed Range 1 (CIDR) to elk ELB",
      "Type": "String",
      "Default": "172.17.32.0/20"
    },
    "ELBAllowedRange2": {
      "Description": "Allowed Range 2 (CIDR) to elk ELB",
      "Type": "String",
      "Default": "10.98.64.0/22"
    },
    "ELBAllowedRange3": {
      "Description": "Allowed Range 3 (CIDR) to elk ELB",
      "Type": "String",
      "Default": "10.96.80.0/20"
    },
    "ELBAllowedRange4": {
      "Description": "Allowed Range 4 (CIDR) to elk ELB",
      "Type": "String",
      "Default": "10.153.16.128/26"
    },
    "LDAPServer": {
      "Description": "If not empty, it will enable auth to LDAP and specify the LDAP host",
      "Type": "String",
      "Default": ""
    },
    "LDAPBindPass" : {
      "Description": "Password to bind to the LDAP server",
      "Type": "String",
      "NoEcho" : "true",
      "Default": ""
    },
    "LDAPBindUser": {
      "Description": "User DN to bind to the LDAP",
      "Type": "String",
      "Default": ""
    },
    "LDAPGroup": {
      "Description": "Full Group DN members of which will be allowed via LDAP",
      "Type": "String",
      "Default": ""
    },
    "LDAPUsersDN": {
      "Description": "The OU where the LDAP users can be found",
      "Type": "String",
      "Default": ""
    },
    "LDAPBaseDN": {
      "Description": "The Base DN of the LDAP server",
      "Type": "String",
      "Default": ""
    },
    "DSADescription": {
      "Description": "Description of this instance for DSM",
      "Type": "String",
      "Default": "ELK Stack"
    },
    "DSAPolicyId": {
      "Description": "Trend Micro Deep Security policy id assigned to this instance",
      "Type": "String",
      "Default": "5"
    },
    "VPC": {
      "Description": "The ID of the VPC we're launching into",
      "Type": "AWS::EC2::VPC::Id"
    },
    "AMIID": {
      "Description": "Which AMIID to use",
      "Type": "AWS::EC2::Image::Id"
    },
    "DefaultSecurityGroup": {
      "Description": "A default security group, which grants Mcafee/Transurban access and common bastion services",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "NATSecurityGroup": {
      "Description": "A security group, which has granted NAT outbound access to 443",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "CrossAccountID": {
      "Description": "The AWS accountID we want to allow to subscribe to the kinesis stream",
      "Type": "String"
    },
    "SubnetA": {
      "Description": "The Private Subnet Availability Zone A subnet ID for the ELB",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "SubnetB": {
      "Description": "The Private Subnet Availability Zone B subnet ID for the ELB",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "TagEnvironment": {
      "Description": "Name of the environment(dev, nonprod, prod, etc",
      "Type": "String",
      "Default": "dev"
    },
    "TagEnvironmentNumber": {
      "Description": "environment number",
      "Type": "String",
      "Default": "1"
    },
    "TagService": {
      "Description": "Name of the overall Service",
      "Type": "String",
      "Default": "logging"
    },
    "TagApplication": {
      "Description": "Name of the Application",
      "Type": "String",
      "Default": "cloudwatch"
    },
    "TagTenant": {
      "Description": "This defines the tenant of the created service",
      "Type": "String",
      "Default": "versent"
    },
    "TagRole": {
      "Description": "This defines the role ",
      "Type": "String",
      "Default": "elk"
    },
    "TagEngagement": {
      "Description": "The engagement, eg. tufms ",
      "Type": "String",
      "Default": "tufms"
    },
    "TagAlarmPrefix": {
      "Description": "The visible predix by the convention, eg [TUFMS][0] ",
      "Type": "String",
      "Default": "[TUFMS][0]"
    },
    "ELBSSLCertificate": {
      "Description": "SSL Certificate for the Elastic Load Balancer.",
      "Type": "String"
    },
    "BuildId": {
      "Description": "An integer representing an incremental build number",
      "Type": "String",
      "Default": "1"
    },
    "DNSZoneId": {
      "Description": "DNS ZoneId for the External Route53 record to be created in",
      "Type": "String"
    },
    "DNSDomain": {
      "Description": "DNS Domain for the external Route53 record to be created in",
      "Type": "String"
    },
    "ClusterSize" : {
      "Description" : "The number of Elasticsearch nodes",
      "Type" : "Number",
      "Default" : "2"
    },
    "HttpProxyHost": {
      "Description": "Optional http_proxy host/ip. If set, export http_proxy will appear in userdata",
      "Type": "String",
      "Default": "none"
    },
    "ManagedServicesTopicARN": {
      "Description": "ManagedServicesTopicARN",
      "Type": "String",
      "Default": ""
    },
    "HttpProxyPort": {
      "Description": "Optional http proxy port. Will be used only if HttpProxyHost is set",
      "Type": "String",
      "Default": "3128"
    },
    "LogGroupNameRegex": {
      "Description": "The CloudWatch Logs log group Regex filter to use as the source for the subscription that feeds the Elasticsearch cluster",
      "Type": "String",
      "Default": ""
    },
    "ESVolumeSnapshotId": {
      "Description": "SnapshotID to use for creation of the data volume.",
      "Type": "String",
      "Default": ""
    },
    "ESVolumeSize": {
      "Description": "Size of the Data volume where ElasticSearch indexes are kept.",
      "Type": "String",
      "Default": "200"
    },

    "NginxUsername" : {
      "Description": "Username to access the Kibana interface and the Elasticsearch API",
      "Type": "String",
      "MinLength" : "1"
    },
    "NginxSourceVersion" : {
      "Description": "If LDAP Auth is used, Nginx has to be compiled from source. This specifies which Nginx version to download",
      "Type": "String",
      "Default" : "1.9.9"
    },

    "NginxPassword" : {
      "Description": "Password to access the Kibana interface and the Elasticsearch API",
      "Type": "String",
      "NoEcho" : "true"
    },
    "S3bucketSource": {
      "Description": "The S3 bucket for source binaries and packages",
      "Type": "String"
    },
    "S3DownloadPath": {
      "Description": "The path where we store all binaries under S3bucketSource",
      "Type": "String",
      "Default": "CWL-consumer"
    },
    "S3bucketBackup": {
      "Description": "The S3 bucket for index backups",
      "Type": "String"
    },
    "S3IndexBackupPath": {
      "Description": "The path where the s3 backup will store indexes",
      "Type": "String",
      "Default": "ELK-index"
    },
    "CloudWatchConsumerCompiledZip": {
      "Description": "The zip file built using maven, which contains jars and configs. Do not include '-cfn.zip' here. The real file should end with -cfn.zip",
      "Type": "String",
      "Default": "cloudwatch-logs-subscription-consumer-1.2.0"
    },
    "NginxLDAPConfigurationZip": {
        "Description": "The zip file which contains nginx configuration.",
        "Type": "String",
        "Default": "tu-nginx-configuration-files.zip"
    },
    "NginxConfigHash": {
        "Description": "MD5 hash of nginx configs",
        "Type": "String",
    },
    "Kibana4Filename": {
      "Description": "The Kibana4 archive filename in S3 the bucket. No extention please. The real file ends with .tar.gz",
      "Type": "String",
      "Default": "kibana-4.5.1-1.x86_64"
    },
    "Kibana3Filename": {
      "Description": "The Kibana4 archive filename in S3 the bucket. No extention please. The real file ends with .zip",
      "Type": "String",
      "Default": "kibana-3.1.2"
    },
    "ElasticSearchFilename": {
      "Description": "The ElasticSearch rpm filename in S3. No extention pleaase. The real file ends with .rpm ",
      "Type": "String",
      "Default": "elasticsearch-2.3.3"
    },

    "RetentionDays" : {
      "Description": "Number of days to retain online logs in the Elasticsearch cluster",
      "Type": "Number",
      "Default" : "31",
      "MinValue" : "1"
    },
    "IndexBackupRetentionDays" : {
      "Description": "Number of days to retain index backups on s3",
      "Type": "Number",
      "Default" : "365",
      "MinValue" : "1"
    },

    "SnapRetentionDays" : {
      "Description": "Number of days to retain snapshots of data volume",
      "Type": "Number",
      "Default" : "14",
      "MinValue" : "1"
    },
    "KinesisShards": {
      "Description": "Number of shards to create for the Kinesis subscription stream",
      "Type": "Number",
      "Default" : "1",
      "MinValue" : "1"
    },

    "ElasticsearchShards": {
      "Description": "The number of primary shards that an Elasticsearch index should have",
      "Type": "Number",
      "Default" : "5",
      "MinValue" : "0"
    },

    "CreateCrossLogDestination": {
      "Description": "Create the cross log destination if `true`",
      "Type": "String",
      "Default": "true"
    },

    "ElasticsearchReplicas": {
      "Description": "The number of replica shards (copies) that each primary Elasticsearch shard should have",
      "Type": "Number",
      "Default" : "1",
      "MinValue" : "0"
    }
  },

  "Mappings" : {
    "Constants" : {
      "S3DownloadPath"   : { "Value": "CWL-consumer" },
      "S3DownloadFile"   : { "Value": "cloudwatch-logs-subscription-consumer-1.2.0" }
    }

  },

  "Conditions" : {
    "NoKeySpecified" : {"Fn::Equals" : [{"Ref" : "KeyName"}, ""]},
    "ESSnapshotIDisSet": {"Fn::Not": [{"Fn::Equals" : [{"Ref" : "ESVolumeSnapshotId"}, ""]}]},
    "EnableAlarms": {"Fn::Not": [{"Fn::Equals": [{ "Ref" : "ManagedServicesTopicARN" }, ""]}]},
    "LDAPAuth": {"Fn::Not": [{"Fn::Equals": [{ "Ref" : "LDAPServer" }, ""]}]},
    "CreateCrossLogDestinationCondition": {"Fn::Equals": [{"Ref": "CreateCrossLogDestination"}, "true"]}
  },

  "Resources" : {
      "KCLLeasesTable": {
         "Type": "AWS::DynamoDB::Table",
         "Properties": {
        "TableName": { "Ref": "AWS::StackName" },
          "ProvisionedThroughput" : {
          "ReadCapacityUnits" : "10",
          "WriteCapacityUnits" : "10"
        },
        "AttributeDefinitions" : [
          {
            "AttributeName" : "leaseKey",
            "AttributeType" : "S"
          }
        ],
        "KeySchema" : [
          {
            "AttributeName" : "leaseKey",
            "KeyType" : "HASH"
          }
        ]
      }
    },

    "KinesisSubscriptionStream": {
      "Type": "AWS::Kinesis::Stream",
      "Properties" :  {
        "ShardCount": { "Ref": "KinesisShards" },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {"Ref": "TagService" },
                  {"Ref": "TagApplication" },
                  {"Ref": "TagEnvironment" },
                  {"Ref": "TagEnvironmentNumber" },
                  {"Ref": "TagRole" },
                  {"Ref": "BuildId" }
                ]
              ]
            }
          },
          {"Key": "Tenant", "Value": {"Ref": "TagTenant" }},
          {"Key": "Service","Value": {"Ref": "TagService"}},
          {"Key": "Application","Value": {"Ref": "TagApplication"}},
          {"Key": "Role","Value": {"Ref": "TagRole"}},
          {"Key": "Environment","Value": {"Ref": "TagEnvironment"}}
        ]
      }
    },

    "CloudWatchLogsKinesisRole" : {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
                "Service": { "Fn::Join": ["", ["logs.", { "Ref": "AWS::Region" } ,".amazonaws.com" ]]}
            },
            "Action": "sts:AssumeRole"
          }]
        }
      }
    },

    "CrossLogDestination" : {
      "Type" : "AWS::Logs::Destination",
      "Condition": "CreateCrossLogDestinationCondition",
      "Properties" : {
        "DestinationName": { "Fn::Join" : [ "-", ["ELKCrossLogDestination",{"Ref": "BuildId"}]]},
        "RoleArn": { "Fn::GetAtt" : [ "CloudWatchLogsKinesisRole", "Arn" ] },
        "TargetArn": { "Fn::Join" : [ ":", [ "arn", "aws", "kinesis",{ "Ref" : "AWS::Region" },{ "Ref" : "AWS::AccountId" }, { "Fn::Join" : [ "/", [ "stream", { "Ref": "KinesisSubscriptionStream"} ] ] } ] ] },
        "DestinationPolicy": { "Fn::Join" : [ "", ["{\"Version\"  : \"2012-10-17\",\"Statement\" : [{\"Effect\" : \"Allow\", \"Principal\" : {\"AWS\": \"", { "Ref" : "CrossAccountID"} ,"\"},\"Action\" : \"logs:PutSubscriptionFilter\", \"Resource\" : \"arn:aws:logs:",{ "Ref" : "AWS::Region" },":",{ "Ref" : "AWS::AccountId" },":destination:ELKCrossLogDestination-",{"Ref": "BuildId"},"\"}]}" ]]}
      }
    },

    "CloudWatchLogsKinesisPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "CloudWatchLogsKinesisPolicy",
        "Roles": [ { "Ref": "CloudWatchLogsKinesisRole" } ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "kinesis:PutRecord",
              "Resource": { "Fn::Join" : ["", ["arn:aws:kinesis:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":stream/", { "Ref": "KinesisSubscriptionStream"} ]] }
            },
            {
              "Effect": "Allow",
              "Action": "iam:PassRole",
              "Resource": { "Fn::Join" : ["", ["arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":role/", { "Ref": "CloudWatchLogsKinesisRole" } ]] }
            }
          ]
        }
      }
    },

    "ElasticsearchNodeRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [ {
            "Effect" : "Allow",
            "Principal" : {
              "Service" : [ "ec2.amazonaws.com" ]
            },
            "Action" : [ "sts:AssumeRole" ]
          } ]
        },
        "Path" : "/"
      }
    },

    "ElasticsearchRolePolicies" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "elasticsearch-node-policy",
        "PolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [
               {
                  "Action": [
                    "s3:GetBucketLocation",
                    "s3:ListBucket"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": ["",[ "arn:aws:s3:::",{ "Ref": "S3bucketSource" } ] ] }
                },
               {
                  "Action": [
                    "s3:GetBucketLocation",
                    "s3:ListBucket"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": ["",[ "arn:aws:s3:::",{ "Ref": "S3bucketBackup" } ] ] }
                },
               {
                  "Action": [
                    "s3:*"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": ["",[ "arn:aws:s3:::",{ "Ref": "S3bucketBackup" }, "/",{ "Ref": "S3IndexBackupPath" },"*"] ] }
                },
               {
                  "Action": [
                    "s3:*"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": ["",[ "arn:aws:s3:::",{ "Ref": "S3bucketSource" }, "/",{ "Ref": "S3DownloadPath" },"*"] ] }
                },
            {
              "Effect": "Allow",
              "Action": "ec2:*",
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": "dynamodb:*",
              "Resource": { "Fn::Join": ["", ["arn:aws:dynamodb:",{ "Ref": "AWS::Region" },":", {"Ref": "AWS::AccountId"},":table/", { "Ref": "AWS::StackName" } ]]}
            },
            {
              "Effect": "Allow",
              "Action": [
                "kinesis:Get*",
                "kinesis:List*",
                "kinesis:Describe*"
              ],
              "Resource": { "Fn::Join": ["", ["arn:aws:kinesis:", { "Ref": "AWS::Region" }, ":",{"Ref": "AWS::AccountId"},":stream/", { "Ref": "KinesisSubscriptionStream" }]]}
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:*"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudwatch:*"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": "iam:PassRole",
              "Resource": { "Fn::Join" : ["", ["arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":role/", { "Ref": "CloudWatchLogsKinesisRole" } ]] }
            }
          ]
        },
        "Roles": [ { "Ref": "ElasticsearchNodeRole" } ]
      }
    },

    "ElasticsearchInstanceProfile" : {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "ElasticsearchNodeRole" } ]
      }
    },

    "ElasticsearchSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "GroupDescription" : "Enable Elasticsearch access",
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "8080",
            "ToPort" : "8080",
            "SourceSecurityGroupOwnerId" : {"Fn::GetAtt" : ["ElasticsearchELB", "SourceSecurityGroup.OwnerAlias"]},
            "SourceSecurityGroupId" : { "Ref" : "ElasticsearchELBSecurityGroup" }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {"Ref": "TagService" },
                  {"Ref": "TagApplication" },
                  {"Ref": "TagEnvironment" },
                  {"Ref": "TagEnvironmentNumber" },
                  "essg",
                  {"Ref": "BuildId" }
                ]
              ]
            }
          },
          {"Key": "Tenant", "Value": {"Ref": "TagTenant" }},
          {"Key": "Service","Value": {"Ref": "TagService"}},
          {"Key": "Application","Value": {"Ref": "TagApplication"}},
          {"Key": "Role","Value": {"Ref": "TagRole"}},
          {"Key": "Environment","Value": {"Ref": "TagEnvironment"}}
        ]
      }
    },

    "ElasticsearchSecurityGroupIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref": "ElasticsearchSecurityGroup" },
        "IpProtocol" : "tcp",
        "FromPort" : "9300",
        "ToPort" : "9399",
        "SourceSecurityGroupId" : { "Ref" : "ElasticsearchSecurityGroup" },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {"Ref": "TagService" },
                  {"Ref": "TagApplication" },
                  {"Ref": "TagEnvironment" },
                  {"Ref": "TagEnvironmentNumber" },
                  {"Ref": "TagRole" },
                  {"Ref": "BuildId" }
                ]
              ]
            }
          },
          {"Key": "Tenant", "Value": {"Ref": "TagTenant" }},
          {"Key": "Service","Value": {"Ref": "TagService"}},
          {"Key": "Application","Value": {"Ref": "TagApplication"}},
          {"Key": "Role","Value": {"Ref": "TagRole"}},
          {"Key": "Environment","Value": {"Ref": "TagEnvironment"}}
        ]
      }
    },

    "ElasticsearchELBSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "GroupDescription" : "Enable restricted ELB access",
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : { "Ref" : "ELBAllowedRange1" } },
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : { "Ref" : "ELBAllowedRange2" } },
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : { "Ref" : "ELBAllowedRange3" } },
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : { "Ref" : "ELBAllowedRange4" } }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {"Ref": "TagService" },
                  {"Ref": "TagApplication" },
                  {"Ref": "TagEnvironment" },
                  {"Ref": "TagEnvironmentNumber" },
                  "ELB",
                  {"Ref": "BuildId" }
                ]
              ]
            }
          },
          {"Key": "Tenant", "Value": {"Ref": "TagTenant" }},
          {"Key": "Service","Value": {"Ref": "TagService"}},
          {"Key": "Application","Value": {"Ref": "TagApplication"}},
          {"Key": "Role","Value": {"Ref": "TagRole"}},
          {"Key": "Environment","Value": {"Ref": "TagEnvironment"}}
        ]
      }
    },

    "ElasticsearchServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "VPCZoneIdentifier" : [{ "Ref" : "SubnetA" }, { "Ref" : "SubnetB" }],
        "LaunchConfigurationName" : { "Ref" : "ElasticsearchServer" },
        "LoadBalancerNames": [  { "Ref": "ElasticsearchELB" } ],
        "MinSize" : "1",
        "MaxSize" : "10",
        "DesiredCapacity" : { "Ref" : "ClusterSize" },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "TagTenant"
                  },
                  {
                    "Ref": "TagService"
                  },
                  {
                    "Ref": "TagApplication"
                  },
                  {
                    "Ref": "TagEnvironment"
                  },
                  {
                    "Ref": "TagRole"
                  },
                  {
                    "Ref": "BuildId"
                  }
                ]
              ]
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "type",
            "Value": "elasticsearch",
            "PropagateAtLaunch": "true"
          },
          {
          "Key": "Tenant",
          "Value": {
            "Ref": "TagTenant"
          },
          "PropagateAtLaunch": "true"
          }, {
          "Key": "Service",
          "Value": {
            "Ref": "TagService"
          },
          "PropagateAtLaunch": "true"
          }, {
          "Key": "Application",
          "Value": {
            "Ref": "TagApplication"
          },
          "PropagateAtLaunch": "true"
          }, {
          "Key": "Role",
          "Value": {
            "Ref": "TagRole"
          },
          "PropagateAtLaunch": "true"
          }, {
          "Key": "Environment",
          "Value": {
            "Ref": "TagEnvironment"
          },
          "PropagateAtLaunch": "true"
         }
        ]
      }
    },

    "ElasticsearchELB" : {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "Subnets" : [{ "Ref" : "SubnetA" }, { "Ref" : "SubnetB" }],
        "CrossZone" : "true",
        "Scheme": "internal",
        "SecurityGroups": [ { "Fn::GetAtt" : [ "ElasticsearchELBSecurityGroup", "GroupId" ] } ],
        "Listeners" : [ {
          "LoadBalancerPort" : "443",
          "InstancePort" : "8080",
          "Protocol" : "HTTPS",
          "SSLCertificateId": {
              "Ref": "ELBSSLCertificate"
            }
        } ],
        "HealthCheck" : {
          "Target" : "TCP:8080",
          "HealthyThreshold" : 3,
          "UnhealthyThreshold" : 2,
          "Interval": 10,
          "Timeout": 5
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "TagTenant"
                  },
                  {
                    "Ref": "TagService"
                  },
                  {
                    "Ref": "TagApplication"
                  },
                  {
                    "Ref": "TagEnvironment"
                  },
                  "ElasticsearchELB",
                  {
                    "Ref": "BuildId"
                  }
                ]
              ]
            }
          },
          {"Key": "Tenant", "Value": {"Ref": "TagTenant" }},
          {"Key": "Service","Value": {"Ref": "TagService"}},
          {"Key": "Application","Value": {"Ref": "TagApplication"}},
          {"Key": "Role","Value": {"Ref": "TagRole"}},
          {"Key": "Environment","Value": {"Ref": "TagEnvironment"}}
        ]
      }
    },

    "ElasticsearchServer": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "files": {
              "/etc/elasticsearch/elasticsearch.yml" : {
                "content" : { "Fn::Join" : ["", [
                  "cloud.aws.region:\n",
                  " ", { "Ref" : "AWS::Region" }, "\n",
                  "discovery:\n",
                  " type: ec2\n",
                  "\n",
                  "discovery.ec2.groups: ", { "Ref" : "ElasticsearchSecurityGroup" }, "\n",
                  "discovery.ec2.tag.type: elasticsearch\n",
                  "\n",
                  "cloud.node.auto_attributes: true\n"
                ]]}
              },
              "/etc/elasticsearch/snapshot.sh": {
                "content": { "Fn::Join" : ["", [
                  "#!/bin/bash -x\n\n",
                  "REGION=",{ "Ref" : "AWS::Region" }, "\n",
                  "datetag=`date -Is`\n",
                  "nametag=\"$datetag-\"",
                     {"Ref": "TagService"},"-",
                     {"Ref": "TagApplication"},"-",
                     {"Ref": "TagEnvironment"},"-",
                     {"Ref": "TagEnvironmentNumber"},"-",
                     {"Ref": "TagRole"},"-",
                     {"Ref": "BuildId"},"\n",
                  "instanceid=`curl -s -L http://169.254.169.254/latest/meta-data/instance-id`\n",
                  "volumeLid=`aws --region=$REGION ec2 describe-volumes --filters Name=attachment.instance-id,Values=$instanceid --query Volumes[].Attachments[].[VolumeId,Device] --output text | grep sdl | awk '{print $1}'`\n",
                  "snapid=`aws --region=$REGION ec2 create-snapshot --volume-id $volumeLid --description \"ELK volume /dev/sdl InstanceId:$instanceid\" --query SnapshotId --output text`\n",
                  "echo \"$datetag {\\\"snapshot_exitcode\\\": $?}\" >> /var/log/elasticsearch/backups.log\n",
                  "aws ec2 --region=$REGION create-tags --resources $snapid --tags Key=Name,Value=$nametag\n",
                  "aws ec2 --region=$REGION create-tags --resources $snapid --tags Key=Tenant,Value='",{ "Ref" : "TagTenant" },"'\n",
                  "aws ec2 --region=$REGION create-tags --resources $snapid --tags Key=Service,Value='",{ "Ref" : "TagService" },"'\n",
                  "aws ec2 --region=$REGION create-tags --resources $snapid --tags Key=Application,Value='",{ "Ref" : "TagApplication" },"'\n",
                  "aws ec2 --region=$REGION create-tags --resources $snapid --tags Key=Role,Value='",{ "Ref" : "TagRole" },"'\n",
                  "aws ec2 --region=$REGION create-tags --resources $snapid --tags Key=Environment,Value='",{ "Ref" : "TagEnvironment" },"'\n",
                  "#\n",
                  "snaplist=`aws ec2 --region=ap-southeast-2 describe-snapshots --filters Name=tag-value,Values=",{ "Ref" : "AWS::StackName" }," --query Snapshots[].[StartTime,SnapshotId] --output text`\n",
                  "IFS=$'\n'\n",
                  "olderthandatenum=`date +'%Y%m%d' -d '",{ "Ref" : "SnapRetentionDays" }," days ago'`\n",
                  "for snap in $snaplist; do\n",
                  "   snapid=`echo $snap | awk '{print $2}'`\n",
                  "   snapdate=`echo $snap | awk '{print $1}'`\n",
                  "   snapdatenum=`date -d \"$snapdate\" +'%Y%m%d'`\n",
                  "   if (( $snapdatenum < $olderthandatenum )); then\n",
                  "     echo \"deleting $snapid\" \n",
                  "     aws --region=$REGION ec2 delete-snapshot --snapshot-id $snapid \n",
                  "   fi\n",
                  "done\n"
                  ]]},
                  "mode"  : "000755"
              },
              "/etc/elasticsearch/health.sh": {
                "content": { "Fn::Join" : ["", [
                  "#!/bin/bash -xe\n\n",
                  "#Healtch checker. Should run every minute via crontab\n",
                  "date=`date --iso-8601=seconds`\n",
                  "curl -s http://localhost:9200/_cluster/health | sed \"s/^/$date /\" | sed 's/green/1/' | sed 's/yellow/2/' | sed 's/red/3/' >> /var/log/elasticsearch/elasticsearch-health.log\n",
                  "echo '' >> /var/log/elasticsearch/elasticsearch-health.log\n",
                  "\n"
                  ]]},
                  "mode"  : "000755"
              },
              "/etc/elasticsearch/inits3backup.sh": {
                "content": { "Fn::Join" : ["", [
                  "#!/bin/bash -x\n\n",
                  "until curl -XPUT 'http://localhost:9200/_snapshot/s3_dev_backup' -d '{\n",
                  "    \"type\": \"s3\",\n",
                  "    \"settings\": {\n",
                  "        \"bucket\": \"",{ "Ref" : "S3bucketBackup" },"\",\n",
                  "        \"region\": \"",{ "Ref": "AWS::Region" },"\",\n",
                  "        \"base_path\": \"",{ "Ref" : "S3IndexBackupPath" },"\",\n",
                  "        \"max_retries\": 3\n",
                  "     }\n",
                  "}'; do sleep 10; done\n",
                  "\n"
                  ]]},
                  "mode"  : "000755"
              },
              "/etc/elasticsearch/s3backup.sh": {
                "content": { "Fn::Join" : ["", [
                  "#!/bin/bash -x\n\n",
                  "yesterday=`date +%Y.%m.%d -d 'yesterday'`\n",
                  "indiceslist=`curl -s http://localhost:9200/_cat/indices | awk '{print $3}' | grep $yesterday`\n",
                  "for index in $indiceslist; do list=\"$list,$index\"; done\n",
                  "list=`echo $list | sed 's/^,//'`\n",
                  "date=`date +%Y.%m.%d`\n",
                  "rand=`awk 'BEGIN{srand();print int(rand()*(30))+1 }'`\n",
                  "echo \"Sleeping for random $rand seconds\"\n",
                  "sleep $rand\n",
                  "output=`curl -XPUT -s -o /dev/null -w \"%{http_code}\" \"http://localhost:9200/_snapshot/s3_dev_backup/$date?wait_for_completion=true\" -d \"{\n",
                  "    \\\"indices\\\": \\\"$list,.kibana\\\",\n",
                  "    \\\"ignore_unavailable\\\": true,\n",
                  "    \\\"include_global_state\\\": false\n",
                  "}\"`\n",
                  "case $output in\n",
                  "400) code=240;;\n",
                  "503) code=253;;\n",
                  "*) code=$output;;\n",
                  "esac\n",
                  "\n",
                  "echo \"$date {\\\"s3backup_code\\\": $code}\" >> /var/log/elasticsearch/backups.log\n",
                  "#remove index backup  older than specified below days\n",
                  "olderthandate=`date +%Y.%m.%d -d '",{ "Ref" : "IndexBackupRetentionDays" }," days ago'`\n",
                  "curl -XDELETE \"http://localhost:9200/_snapshot/s3_dev_backup/$olderthandate\"\n",
                  "\n"
                  ]]},
                  "mode"  : "000755"
              },
              "/etc/elasticsearch/startLogConsumer.sh": {
                "content": { "Fn::Join" : ["", [
                  "#!/bin/bash -x\n\n",
                  "cd /root/\n",
                  "rand=`awk 'BEGIN{srand();print int(rand()*(30))+1 }'`\n",
                  "echo \"Sleeping for random $rand seconds\"\n",
                  "sleep $rand\n",
                  "collectorpid=`ps -ef | grep 'DkinesisInputStream' | grep java | awk '{print $2}'` && kill -9 $collectorpid\n",
                  "{ nohup java -DkinesisInputStream=", { "Ref": "KinesisSubscriptionStream" },
                    " -DregionName=", { "Ref": "AWS::Region" },
                    " -DappName=", { "Ref": "KCLLeasesTable" },
                    " -Dlog4j.configuration=log4j-prod.properties",
                    " -DelasticsearchClusterName=elasticsearch",
                    " -cp ", { "Ref" :"CloudWatchConsumerCompiledZip"} ,"/", { "Ref" :"CloudWatchConsumerCompiledZip"} ,".jar",
                    " com.amazonaws.services.logs.connectors.samples.elasticsearch.ElasticsearchConnector",
                    " > /dev/null 2>&1 & } && disown -h %1"
                  ]]},
                  "mode"  : "000755"
              },
              "/etc/logrotate.d/elasticsearch": {
                   "content": { "Fn::Join" : ["", [
                  "/var/log/elasticsearch/elasticsearch_index_indexing_slowlog.log\n",
                  "/var/log/elasticsearch/elasticsearch_index_search_slowlog.log\n",
                  "/var/log/elasticsearch/elasticsearch-health.log\n",
                  "/var/log/elasticsearch/backups.log\n",
                  "/var/log/elasticsearch/elasticsearch.log\n",
                  "{\n",
                  "    daily\n",
                  "    rotate 5\n",
                  "    copytruncate\n",
                  "    dateext\n",
                  "    compress\n",
                  "}\n"
                ]]}
              },
              "/etc/logrotate.d/cloudwatch-logs-subscription-consumer": {
                   "content": { "Fn::Join" : ["", [
                  "/var/log/cloudwatch-logs-subscription-consumer.log\n",
                  "{\n",
                  "    daily\n",
                  "    rotate 5\n",
                  "    copytruncate\n",
                  "    dateext\n",
                  "    compress\n",
                  "}\n"
                ]]}
              }
            },

            "services": {
              "sysvinit": {
                "awslogs": {
                    "enabled" : "true",
                    "ensureRunning" : "true",
                    "files" : [ "/etc/awslogs/awslogs.conf" ]
                }
              }
            }
          }
        }
      },

      "Properties": {
        "ImageId" : { "Ref" : "AMIID" },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [
             {"Ref" : "ElasticsearchSecurityGroup"},
             {"Ref": "NATSecurityGroup"},
             {"Ref": "DefaultSecurityGroup"}
        ],
        "KeyName"        : { "Ref" : "KeyName" },
        "IamInstanceProfile" : { "Ref" : "ElasticsearchInstanceProfile" },
        "AssociatePublicIpAddress" : false,
        "BlockDeviceMappings" : [ {
            "DeviceName" : "/dev/sdl",
            "Ebs" : {
              "Fn::If": ["ESSnapshotIDisSet",
              {
                "VolumeSize" : {"Ref":"ESVolumeSize"},
                "SnapshotId" : {"Ref":"ESVolumeSnapshotId"},
                "Encrypted" : true,
                "DeleteOnTermination": false,
                "VolumeType" : "gp2"
              },
              {
                "VolumeSize" : {"Ref":"ESVolumeSize"},
                "Encrypted" : true,
                "DeleteOnTermination": false,
                "VolumeType" : "gp2"
              }
            ]
          }
        } ],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -ex\n",
                "mkdir /var/lib/elasticsearch\n",
                "#initialise data volume\n",
                "mkfs.ext4 /dev/xvdl\n",
                "mount /dev/xvdl /var/lib/elasticsearch\n",
                "echo '/dev/xvdl       /var/lib/elasticsearch   ext4    defaults        0       2' >> /etc/fstab \n",
                "#\n",
                "REGION=\"",{ "Ref": "AWS::Region" },"\"\n",
                "export AWS_REGION=$REGION\n",
                "export AWS_DEFAULT_REGION=$REGION\n",
                "NGINX_CONFIG_HASH='", {"Ref": "NginxConfigHash"}, "'\n",
                "\n",
                "httpproxyhost='",{ "Ref": "HttpProxyHost" },"'\n",
                "httpproxyport='",{ "Ref": "HttpProxyPort" },"'\n",
                "if [ ! \"$httpproxyhost\" = \"none\" ]; then \n",
                "   cat > /etc/profile.d/proxy.sh << EOF\n",
                "export http_proxy=http://$httpproxyhost:$httpproxyport\n",
                "export https_proxy=https://$httpproxyhost:$httpproxyport\n",
                "export no_proxy=\"169.254.169.254,localhost,127.0.0.1,.",{ "Ref": "S3bucketSource" },",s3-$REGION.amazonaws.com\"\n",
                "export HTTP_PROXY=http://$httpproxyhost:$httpproxyport\n",
                "export HTTPS_PROXY=https://$httpproxyhost:$httpproxyport\n",
                "export JAVA_OPTS=\"-DproxyHost=$httpproxyhost -DproxyPort=$httpproxyport\"\n",
                "export NO_PROXY=\"169.254.169.254,localhost,127.0.0.1,.",{ "Ref": "S3bucketSource" },",s3-$REGION.amazonaws.com\"\n",
                "EOF\n",
                "   chmod 755 /etc/profile.d/proxy.sh\n",
                "   source /etc/profile.d/proxy.sh\n",
                "   /bin/cp -fr /etc/profile.d/proxy.sh /var/awslogs/etc/proxy.conf\n",
                "fi\n",
          "#Install few required yums\n",
          "yum clean all\n",
          "until yum install -y httpd python-pip nginx; do sleep 10; done\n",
          "wget --no-cookies --no-check-certificate --header 'Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie' 'http://download.oracle.com/otn-pub/java/jdk/8u91-b14/jre-8u91-linux-x64.rpm'\n",
          "rpm -ivh jre-8u91-linux-x64.rpm\n",
          "\n",
          "\n",
          "\n",
          "cd /tmp\n",

          "aws s3 cp s3://", {"Ref": "S3bucketSource"}, "/", {"Ref": "S3DownloadPath"}, "/", {"Ref": "NginxLDAPConfigurationZip"}, " .\n",
          "unzip ", {"Ref": "NginxLDAPConfigurationZip"}, "\n",

          "#Get elasticsearch RPM\n",
          "aws s3 cp s3://",{"Ref": "S3bucketSource"},"/", { "Ref" : "S3DownloadPath" } ,"/", { "Ref" :"ElasticSearchFilename"} ,".rpm .\n",
          "yum install -y ",{ "Ref" :"ElasticSearchFilename"} ,".rpm\n",

          "aws s3 cp s3://",{"Ref": "S3bucketSource"},"/", { "Ref" : "S3DownloadPath" } ,"/", { "Ref" :"CloudWatchConsumerCompiledZip"} ,"-cfn.zip .\n",
          "unzip ", { "Ref" :"CloudWatchConsumerCompiledZip"} ,"-cfn.zip\n",

          "# (OLD, now switched to rpm based install for kibana ) Get Kibana 4\n",
          "#aws s3 cp s3://",{"Ref": "S3bucketSource"},"/", { "Ref" : "S3DownloadPath" } ,"/",{"Ref": "Kibana4Filename"},".tar.gz .\n",
          "#tar -xf ",{"Ref": "Kibana4Filename"},".tar.gz\n",
          "wget https://download.elastic.co/kibana/kibana/",{"Ref": "Kibana4Filename"},".rpm\n",
          "rpm -ivh ",{"Ref": "Kibana4Filename"},".rpm\n",

          "# Config\n",
          "cfn-init -s ", { "Ref" : "AWS::StackId" }, " -r ElasticsearchServer ",
          "    --region ", { "Ref" : "AWS::Region" }, " -v\n",

          "echo copyElasticsearchTemplates\n",
          "cp -R ./", { "Ref" :"CloudWatchConsumerCompiledZip"} ,"/configuration/elasticsearch/* /etc/elasticsearch/\n",

          "echo updateESConfigForNode\n",
          "echo \"node.name: $(curl -silent http://169.254.169.254/latest/dynamic/instance-identity/document 2>/dev/null | grep instanceId | awk -F\\\" '{print $4}') \" >> /etc/elasticsearch/elasticsearch.yml\n",
          "echo 'network.host: 0.0.0.0' >> /etc/elasticsearch/elasticsearch.yml\n",
          "echo \" node.rack: $(curl -silent http://169.254.169.254/latest/dynamic/instance-identity/document 2>/dev/null | grep availabilityZone | awk -F\\\" '{print $4}') \" >> /etc/elasticsearch/elasticsearch.yml\n",

          {"Fn::If": ["LDAPAuth", "export NGINX_LDAP=1\n", ""]},
          "export DNSDomain='", {"Ref": "DNSDomain"}, "'\n",
          "export S3bucketSource='", {"Ref": "S3bucketSource"}, "'\n",
          "export LDAPServer='", {"Ref": "LDAPServer"}, "'\n",
          "export LDAPUsersDN='", {"Ref": "LDAPUsersDN"}, "'\n",
          "export LDAPBaseDN='", {"Ref": "LDAPBaseDN"}, "'\n",
          "export LDAPGroup='", {"Ref": "LDAPGroup"}, "'\n",
          "export LDAPBindUser='", {"Ref": "LDAPBindUser"}, "'\n",
          "export LDAPBindPass='", {"Ref": "LDAPBindPass"}, "'\n",
          "bash ./nginx/entrypoint.sh '", {"Ref": "NginxSourceVersion"}, "'\n",

          "systemctl daemon-reload\n",
          "systemctl start elasticsearch elasticsearch kibana\n",
          "systemctl restart nginx\n",
          "systemctl enable kibana elasticsearch nginx\n",

          "echo installESPlugins\n",
          "/usr/share/elasticsearch/bin/plugin install -b cloud-aws\n",
          "/usr/share/elasticsearch/bin/plugin install lmenezes/elasticsearch-kopf\n",

          "echo getPipAndCurator\n",
          "pip install elasticsearch-curator\n",

          "mkdir -p /var/awslogs/state",

          "chown -R elasticsearch:elasticsearch /etc/elasticsearch/templates\n",
          "service elasticsearch restart\n",
          "service nginx restart\n",
          "# Allow 60% of total mem as heap size for cluster \n",
          "freemem=$(free -m | grep Mem | awk '{ printf \"%1.0f\\n\", 0.6*$2; }')",
          " && sed -i \"s/#ES_HEAP_SIZE=.*/ES_HEAP_SIZE=$(echo $freemem)m/g\" /etc/sysconfig/elasticsearch\n",

          "#Fix kopf location \n",
          "sed -i '/elasticsearch_root_path/ s#\"\"#\"/es\"#' /usr/share/elasticsearch/plugins/kopf/_site/kopf_external_settings.json\n",

          "# Update Elasticsearch index templates\n",
          "sed -i '5i\\ \\ \\ \\ \\ \\ \"index.number_of_replicas\" : ", { "Ref": "ElasticsearchReplicas" } ,",' /etc/elasticsearch/templates/cwl_template.json || error_exit \"Failed update cwl_template.json\"\n",
          "sed -i '5i\\ \\ \\ \\ \\ \\ \"number_of_shards\" : ", { "Ref": "ElasticsearchShards" } ,",' /etc/elasticsearch/templates/cwl_template.json || error_exit \"Failed update cwl_template.json\"\n",
          "sed -i '5i\\ \\ \\ \\ \\ \\ \"index.number_of_replicas\" : ", { "Ref": "ElasticsearchReplicas" } ,",' /etc/elasticsearch/templates/kibana3_template.json || error_exit \"Failed update kibana3_template.json\"\n",
          "sed -i '5i\\ \\ \\ \\ \\ \\ \"index.number_of_replicas\" : ", { "Ref": "ElasticsearchReplicas" } ,",' /etc/elasticsearch/templates/kibana4_template.json || error_exit \"Failed update kibana4_template.json\"\n",
          "\n",
          "until curl -v -XPUT -d @/etc/elasticsearch/templates/cwl_template.json http://localhost:9200/_template/cwl-template; do sleep 10; done\n",
          "\n",
          "/etc/init.d/elasticsearch restart\n",
          "\n",
          "/etc/elasticsearch/startLogConsumer.sh\n",
          "# Set hourly cron for curator\n",
          "#crontab -l > mycron\n\n",
          "echo \"0 * * * * /usr/local/bin/curator --host localhost --port 9200 --debug delete indices --prefix \\\"cwl-\\\" --time-unit days --older-than ",
          { "Ref" : "RetentionDays" },
          " --timestring \\\"\\%Y.\\%m.\\%d\\\"\" >> mycron || error_exit \"Failed to create cron file\" \n",

          "crontab mycron && rm -f mycron || error_exit \"Failed to set cron \" \n",

          "# Subscribe the s3 bucket\n",
          "/etc/elasticsearch/inits3backup.sh\n",
          "# Set cron for log consumer, once a hour\n",
          "crontab -l > snapcron\n",
          "echo \"10 * * * * /etc/elasticsearch/startLogConsumer.sh\" >> snapcron && crontab snapcron && rm -f snapcron\n",
          "# Set cron for elasticsearch healths\n",
          "crontab -l > snapcron\n",
          "echo \"* * * * * /etc/elasticsearch/health.sh\" >> snapcron && crontab snapcron && rm -f snapcron\n",
          "# Set cron for Volume Snapshots\n",
          "crontab -l > snapcron\n",
          "echo \"0 1 * * * /etc/elasticsearch/snapshot.sh\" >> snapcron && crontab snapcron && rm -f snapcron\n",
          "# Set cron for s3 backups\n",
          "crontab -l > snapcron\n",
          "echo \"0 11 * * * /etc/elasticsearch/s3backup.sh\" >> snapcron && crontab snapcron && rm -f snapcron\n",
          "# Try to register CloudWatch subscription filters\n",
          "cat > /etc/subscribefilters.sh << 'EOF'\n",
          "#!/bin/bash -ex\n",
          "#This script is disabled! Use as example ONLY. Lyu \n",
          "#filter='",{"Ref": "LogGroupNameRegex"},"'\n",
          "#loggroups=`aws logs describe-log-groups --query logGroups[].logGroupName | awk -F'\"' '{print $2}' | grep -v '^$' | grep \"$filter\"`\n",
          "#for group in $loggroups; do\n",
          "# aws logs put-subscription-filter \\\n",
          "#   --log-group-name \"$group\" \\\n",
          "#   --filter-name \"ELK-filter-$group\" \\\n",
          "#   --destination-arn '",{ "Fn::Join" : [ ":", [ "arn", "aws", "kinesis",{ "Ref" : "AWS::Region" },{ "Ref" : "AWS::AccountId" }, { "Fn::Join" : [ "/", [ "stream", { "Ref": "KinesisSubscriptionStream"} ] ] } ] ] },"' \\\n",
          "#   --filter-pattern '' \\\n",
          "#   --role-arn '",{ "Fn::GetAtt" : [ "CloudWatchLogsKinesisRole", "Arn" ] },"'\n",
          "#done\n",
          "EOF\n",
          "\n",
          "#Add selinux modules\n",
          "setenforce 0\n",
          "#curl -L -v -u ",{"Ref":"NginxUsername"},":",{"Ref":"NginxPassword"}," http://127.0.0.1:8080/kibana4/\n",
          "#curl -L -v -u ",{"Ref":"NginxUsername"},":",{"Ref":"NginxPassword"}," http://127.0.0.1:8080/kibana3/\n",
          "#sleep 2\n",
          "#grep nginx /var/log/audit/audit.log | audit2allow -M nginx && semodule -i nginx.pp\n",
          "\n",
          "sed -i 's/ENV/",{"Ref": "TagEnvironment"},"/' /var/awslogs/etc/awslogs.conf\n",
          "cat << EOF >> /var/awslogs/etc/awslogs.conf\n",
          "\n",
          "[/var/log/elasticsearch/elasticsearch.log]\n",
          "file = /var/log/elasticsearch/elasticsearch.log\n",
          "log_group_name = ",{"Ref": "TagEnvironment"},"#",{"Ref": "TagEngagement"},".elk#elasticsearch.log\n",
          "log_stream_name = {instance_id}\n",
          "\n",
          "[/var/log/elasticsearch/backups.log]\n",
          "file = /var/log/elasticsearch/backups.log\n",
          "log_group_name = ",{"Ref": "TagEnvironment"},"#",{"Ref": "TagEngagement"},".elk#backups.log\n",
          "log_stream_name = {instance_id}\n",
          "\n",
          "[/var/log/elasticsearch/elasticsearch-health.log]\n",
          "file = /var/log/elasticsearch/elasticsearch-health.log\n",
          "log_group_name = ",{"Ref": "TagEnvironment"},"#",{"Ref": "TagEngagement"},".elk#elasticsearch-health.log\n",
          "log_stream_name = {instance_id}\n",
          "\n",
          "[/var/log/nginx/access.log]\n",
          "file = /var/log/nginx/access.log\n",
          "log_group_name = ",{"Ref": "TagEnvironment"},"#",{"Ref": "TagEngagement"},".elk#access.log\n",
          "log_stream_name = {instance_id}\n",
          "\n",
          "[/var/log/nginx/error.log]\n",
          "file = /var/log/nginx/error.log\n",
          "log_group_name = ",{"Ref": "TagEnvironment"},"#",{"Ref": "TagEngagement"},".elk#error.log\n",
          "log_stream_name = {instance_id}\n",
          "\n",
          "[/var/log/cloudwatch-logs-subscription-consumer.log]\n",
          "file = /var/log/cloudwatch-logs-subscription-consumer.log\n",
          "log_group_name = ",{"Ref": "TagEnvironment"},"#",{"Ref": "TagEngagement"},".elk#cloudwatch-logs-subscription-consumer.log\n",
          "log_stream_name = {instance_id}\n",
          "EOF\n",
          "/etc/init.d/awslogs restart\n",
          "#add ELK disk counter\n",
          "sed -i '/region =/a [[[ELKBytesPercentFree]]]\\ncollector = diskspace\\nmetric = _var_lib_elasticsearch.byte_percentfree\\nnamespace = DiskSpace\\nname = ELKBytesPercentFree\\nunit = Percent\\n\\n' /etc/diamond/diamond.conf\n",
          "#Enabe and start Diamond\n",
          "sed -i 's/=HTTPS_PROXY/=\\$HTTPS_PROXY/' /etc/systemd/system/diamond.service\n",
          "sed -i 's/=HTTP_PROXY/=\\$HTTP_PROXY/' /etc/systemd/system/diamond.service\n",
          "systemctl daemon-reload\n",
          "cat >/usr/local/etc/dsa_install.conf <<EOF\n",
          "DSA_DESCRIPTION=\"", { "Ref": "DSADescription" }, "\"\n",
          "DSA_POLICY_ID=", { "Ref": "DSAPolicyId" }, "\n",
          "EOF\n",
          "\n",
          "# Install and activate Trend Micro Deep Security Agent\n",
          "#/usr/local/bin/dsa-activate.sh\n",
          "systemctl stop ds_agent\n",
          "systemctl disable ds_agent\n",
          "systemctl mask ds_agent\n",
          "\n",
          "systemctl enable diamond.service\n",
          "systemctl start diamond.service\n\n",
          "#bash -x /etc/subscribefilters.sh\n",
          "\n"
        ]]}}
      }
    },

    "ELBRoute53Record": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": {
          "Ref": "DNSZoneId"
        },
        "Comment": "ELK Cluster ELB Record",
        "Name": {"Fn::Join": [ "",[ "TU-Logs-",{"Ref": "BuildId"},".",{"Ref": "DNSDomain"},"."] ] },
        "Type": "CNAME",
        "TTL": "60",
        "ResourceRecords": [
          {
            "Fn::GetAtt": ["ElasticsearchELB", "DNSName" ]
          }
        ]
      }
    },
    "InstanceCPULoadAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Condition": "EnableAlarms",
      "Properties" : {
        "AlarmDescription" : "Alarm when CPU usage is above 90%",
        "AlarmName" : {"Fn::Join": [ "",[{"Ref" : "TagAlarmPrefix" }," ",{  "Ref" : "TagApplication" }," InstanceCPULoadAlarm"] ] },
        "Namespace" : "AWS/EC2",
        "MetricName" : "CPUUtilization",
        "Statistic" : "Minimum",
        "Period" : "3600",
        "Threshold" : "90",
        "Unit" : "Percent",
        "ComparisonOperator" : "GreaterThanThreshold",
        "EvaluationPeriods" : "1",
        "Dimensions" : [ {
            "Name" : "AutoScalingGroupName",
            "Value" : { "Ref" : "ElasticsearchServerGroup" }
          } ],
        "AlarmActions" : [ {  "Ref" : "ManagedServicesTopicARN" } ],
      }
    },
    "StatusCheckFailedAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Condition": "EnableAlarms",
      "Properties" : {
        "AlarmDescription" : "Alarm when either StatusCheckFailed_System or StatusCheckFailed_Instance returns a failure",
        "AlarmName" : {"Fn::Join": [ "",[{"Ref" : "TagAlarmPrefix" }," ",{  "Ref" : "TagApplication" }," StatusCheckFailedAlarm"] ] },
        "Namespace" : "AWS/EC2",
        "MetricName" : "StatusCheckFailed",
        "Statistic" : "Maximum",
        "Period" : "900",
        "Threshold" : "1",
        "Unit" : "Count",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Dimensions" : [ {
            "Name" : "AutoScalingGroupName",
            "Value" : { "Ref" : "ElasticsearchServerGroup" }
          } ],
        "AlarmActions" : [ {  "Ref" : "ManagedServicesTopicARN" } ],
      }
    },
    "UnHealthyHostAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Condition": "EnableAlarms",
      "Properties" : {
        "AlarmDescription" : "Alarm when Unhealthy application servers exist.",
        "AlarmName" : {"Fn::Join": [ "",[{"Ref" : "TagAlarmPrefix" }," ",{  "Ref" : "TagApplication" }," UnHealthyHostAlarm"] ] },
        "Namespace" : "AWS/ELB",
        "MetricName" : "UnHealthyHostCount",
        "Statistic" : "Minimum",
        "Period" : "900",
        "Threshold" : "1",
        "Unit" : "Count",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Dimensions" : [ {
          "Name" : "LoadBalancerName",
          "Value" : { "Ref" : "ElasticsearchELB"}
        } ],
        "AlarmActions" : [ {  "Ref" : "ManagedServicesTopicARN" } ],
      }
    },
    "ELKStatusFilter": {
    "Type": "AWS::Logs::MetricFilter",
    "Properties": {
        "LogGroupName": { "Fn::Join" : ["", [{"Ref": "TagEnvironment"},"#",{"Ref": "TagEngagement"},".elk#elasticsearch-health.log"]]},
        "FilterPattern": "{$.status = * }",
        "MetricTransformations": [
            {
                "MetricValue": "$.status",
                "MetricNamespace": "ELKStatus",
                "MetricName": "ELKStatusNotGreen"
            }
        ]
    }
  },
  "ELKIndexBackupExitCode": {
    "Type": "AWS::Logs::MetricFilter",
    "Properties": {
        "LogGroupName": { "Fn::Join" : ["", [{"Ref": "TagEnvironment"},"#",{"Ref": "TagEngagement"},".elk#backups.log"]]},
        "FilterPattern": "{$.s3backup_code = *}",
        "MetricTransformations": [
            {
                "MetricValue": "$.s3backup_code",
                "MetricNamespace": "ELKStatus",
                "MetricName": "ELKIndexBackupExitCode"
            }
        ]
    }
  },
  "ELKSnapshotExitCode": {
    "Type": "AWS::Logs::MetricFilter",
    "Properties": {
        "LogGroupName": { "Fn::Join" : ["", [{"Ref": "TagEnvironment"},"#",{"Ref": "TagEngagement"},".elk#backups.log"]]},
        "FilterPattern": "{ $.snapshot_exitcode = * }",
        "MetricTransformations": [
            {
                "MetricValue": "$.snapshot_exitcode",
                "MetricNamespace": "ELKStatus",
                "MetricName": "ELKSnapshotExitCode"
            }
        ]
    }
  },

  "ELKNumberOfNodes": {
    "Type": "AWS::Logs::MetricFilter",
    "Properties": {
        "LogGroupName": { "Fn::Join" : ["", [{"Ref": "TagEnvironment"},"#",{"Ref": "TagEngagement"},".elk#elasticsearch-health.log"]]},
        "FilterPattern": "{$.number_of_nodes = * }",
        "MetricTransformations": [
            {
                "MetricValue": "$.number_of_nodes",
                "MetricNamespace": "ELKStatus",
                "MetricName": "ELKStatusNumberOfNodes"
            }
        ]
    }
  },

        "ELKIndexBackupAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "This will trigger when Http Responce Code of the smapshot curl is more than 399. ",
                "AlarmName" : {"Fn::Join": [ "",[{"Ref" : "TagAlarmPrefix" }," ",{  "Ref" : "TagApplication" }," ELKIndexBackupAlarm"] ] },
                "MetricName": "ELKIndexBackupExitCode",
                "Namespace": "ELKStatus",
                "Statistic": "Minimum",
                "Period": "86400",
                "EvaluationPeriods": "1",
                "Threshold": "399",
                "AlarmActions": [ { "Ref": "ManagedServicesTopicARN" } ],
                "InsufficientDataActions": [ { "Ref": "ManagedServicesTopicARN" } ],
                "ComparisonOperator": "GreaterThanThreshold"
            }
        },
        "ELKSnapshotAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "This will trigger when snapshot exitcode is greater than 0. ",
                "AlarmName" : {"Fn::Join": [ "",[{"Ref" : "TagAlarmPrefix" }," ",{  "Ref" : "TagApplication" }," ELKSnapshotAlarm"] ] },
                "MetricName": "ELKSnapshotExitCode",
                "Namespace": "ELKStatus",
                "Statistic": "Average",
                "Period": "86400",
                "EvaluationPeriods": "1",
                "Threshold": "0",
                "AlarmActions": [ { "Ref": "ManagedServicesTopicARN" } ],
                "InsufficientDataActions": [ { "Ref": "ManagedServicesTopicARN" } ],
                "ComparisonOperator": "GreaterThanThreshold"
            }
        },
        "ELKNotGreenAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "This will change to insufficent if status is not green. ",
                "AlarmName" : {"Fn::Join": [ "",[{"Ref" : "TagAlarmPrefix" }," ",{  "Ref" : "TagApplication" }," ELKNotGreenAlarm"] ] },
                "MetricName": "ELKStatusNotGreen",
                "Namespace": "ELKStatus",
                "Statistic": "Minimum",
                "Period": "86400",
                "EvaluationPeriods": "1",
                "Threshold": "1.5",
                "AlarmActions": [ { "Ref": "ManagedServicesTopicARN" } ],
                "ComparisonOperator": "GreaterThanThreshold"
            }
        },

        "ELKNumberOfNodesAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "This  will change to Alarm if number of nodes less than 2 ",
                "AlarmName" : {"Fn::Join": [ "",[{"Ref" : "TagAlarmPrefix" }," ",{  "Ref" : "TagApplication" }," ELKNumberOfNodesAlarm"] ] },
                "MetricName": "ELKStatusNumberOfNodes",
                "Namespace": "ELKStatus",
                "Statistic": "Maximum",
                "Period": "900",
                "EvaluationPeriods": "1",
                "Threshold": "1",
                "AlarmActions": [ { "Ref": "ManagedServicesTopicARN" } ],
                "ComparisonOperator": "LessThanOrEqualToThreshold"
            }
        },
    "RootBytesPercentFree": {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "ActionsEnabled" : true,
        "AlarmDescription" : "/ volume free space monitoring",
        "AlarmName" : {"Fn::Join": [ "",[{"Ref" : "TagAlarmPrefix" }," ",{  "Ref" : "TagApplication" }," RootBytesPercentFree"] ] },
        "ComparisonOperator" : "LessThanThreshold",
        "EvaluationPeriods" : "5",
        "AlarmActions": [ { "Ref": "ManagedServicesTopicARN" } ],
        "MetricName" : "RootBytesPercentFree",
        "Namespace" : "DiskSpace",
        "Dimensions" : [ {
            "Name" : "AutoScalingGroupName",
            "Value" : { "Ref" : "ElasticsearchServerGroup" }
        } ],
        "Unit" : "Percent",
        "Period" : "60",
        "Statistic" : "Minimum",
        "Threshold" : "20"
      }
    },
    "HomeBytesPercentFree": {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "ActionsEnabled" : true,
        "AlarmDescription" : "/home volume free space monitoring",
        "AlarmName" : {"Fn::Join": [ "",[{"Ref" : "TagAlarmPrefix" }," ",{  "Ref" : "TagApplication" }," HomeBytesPercentFree"] ] },
        "ComparisonOperator" : "LessThanThreshold",
        "EvaluationPeriods" : "5",
        "AlarmActions": [ { "Ref": "ManagedServicesTopicARN" } ],
        "MetricName" : "HomeBytesPercentFree",
        "Namespace" : "DiskSpace",
        "Dimensions" : [ {
            "Name" : "AutoScalingGroupName",
            "Value" : { "Ref" : "ElasticsearchServerGroup" }
        } ],
        "Unit" : "Percent",
        "Period" : "60",
        "Statistic" : "Minimum",
        "Threshold" : "20"
      }
    },
    "VarBytesPercentFree": {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "ActionsEnabled" : true,
        "AlarmDescription" : "/var volume free space monitoring",
        "AlarmName" : {"Fn::Join": [ "",[{"Ref" : "TagAlarmPrefix" }," ",{  "Ref" : "TagApplication" }," VarBytesPercentFree"] ] },
        "ComparisonOperator" : "LessThanThreshold",
        "EvaluationPeriods" : "5",
        "AlarmActions": [ { "Ref": "ManagedServicesTopicARN" } ],
        "MetricName" : "VarBytesPercentFree",
        "Namespace" : "DiskSpace",
        "Dimensions" : [ {
            "Name" : "AutoScalingGroupName",
            "Value" : { "Ref" : "ElasticsearchServerGroup" }
        } ],
        "Unit" : "Percent",
        "Period" : "60",
        "Statistic" : "Minimum",
        "Threshold" : "20"
      }
    },
    "VarLogBytesPercentFree": {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "ActionsEnabled" : true,
        "AlarmDescription" : "/var/log volume free space monitoring",
        "AlarmName" : {"Fn::Join": [ "",[{"Ref" : "TagAlarmPrefix" }," ",{  "Ref" : "TagApplication" }," VarLogBytesPercentFree"] ] },
        "ComparisonOperator" : "LessThanThreshold",
        "EvaluationPeriods" : "5",
        "AlarmActions": [ { "Ref": "ManagedServicesTopicARN" } ],
        "MetricName" : "VarLogBytesPercentFree",
        "Namespace" : "DiskSpace",
        "Dimensions" : [ {
            "Name" : "AutoScalingGroupName",
            "Value" : { "Ref" : "ElasticsearchServerGroup" }
        } ],
        "Unit" : "Percent",
        "Period" : "60",
        "Statistic" : "Minimum",
        "Threshold" : "20"
      }
    },
    "VarLogAuditBytesPercentFree": {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "ActionsEnabled" : true,
        "AlarmDescription" : "/var/log/audit volume free space monitoring",
        "AlarmName" : {"Fn::Join": [ "",[{"Ref" : "TagAlarmPrefix" }," ",{  "Ref" : "TagApplication" }," VarLogAuditBytesPercentFree"] ] },
        "ComparisonOperator" : "LessThanThreshold",
        "EvaluationPeriods" : "5",
        "AlarmActions": [ { "Ref": "ManagedServicesTopicARN" } ],
        "MetricName" : "VarLogAuditBytesPercentFree",
        "Namespace" : "DiskSpace",
        "Dimensions" : [ {
            "Name" : "AutoScalingGroupName",
            "Value" : { "Ref" : "ElasticsearchServerGroup" }
        } ],
        "Unit" : "Percent",
        "Period" : "60",
        "Statistic" : "Minimum",
        "Threshold" : "20"
      }
    },
    "ELKBytesPercentFree": {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "ActionsEnabled" : true,
        "AlarmDescription" : "/var/lib/elasticsearch volume free space monitoring",
        "AlarmName" : {"Fn::Join": [ "",[{"Ref" : "TagAlarmPrefix" }," ",{  "Ref" : "TagApplication" }," ELKBytesPercentFree"] ] },
        "ComparisonOperator" : "LessThanThreshold",
        "EvaluationPeriods" : "5",
        "AlarmActions": [ { "Ref": "ManagedServicesTopicARN" } ],
        "MetricName" : "ELKBytesPercentFree",
        "Namespace" : "DiskSpace",
        "Dimensions" : [ {
            "Name" : "AutoScalingGroupName",
            "Value" : { "Ref" : "ElasticsearchServerGroup" }
        } ],
        "Unit" : "Percent",
        "Period" : "60",
        "Statistic" : "Minimum",
        "Threshold" : "20"
      }
    },
    "TmpBytesPercentFree": {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "ActionsEnabled" : true,
        "AlarmDescription" : "/tmp volume free space monitoring",
        "AlarmName" : {"Fn::Join": [ "",[{"Ref" : "TagAlarmPrefix" }," ",{  "Ref" : "TagApplication" }," TmpBytesPercentFree"] ] },
        "ComparisonOperator" : "LessThanThreshold",
        "EvaluationPeriods" : "5",
        "AlarmActions": [ { "Ref": "ManagedServicesTopicARN" } ],
        "MetricName" : "TmpBytesPercentFree",
        "Namespace" : "DiskSpace",
        "Dimensions" : [ {
            "Name" : "AutoScalingGroupName",
            "Value" : { "Ref" : "ElasticsearchServerGroup" }
        } ],
        "Unit" : "Percent",
        "Period" : "60",
        "Statistic" : "Minimum",
        "Threshold" : "20"
      }
    }
  },

  "Outputs" : {
    "Kibana4" : {
      "Description" : "Kibana 4",
      "Value" :  { "Fn::Join" : ["",["https://TU-Logs-",{"Ref": "BuildId"},".",{"Ref": "DNSDomain" }, "/"]]}
    },
    "Elasticsearch" : {
      "Description" : "Elasticsearch API",
      "Value" :  { "Fn::Join" : ["",["https://TU-Logs-",{"Ref": "BuildId"},".",{"Ref": "DNSDomain" }, "/es/?pretty"]]}
    },
    "Kopf" : {
      "Description" : "Kopf Admin Tool",
      "Value" :  { "Fn::Join" : ["",["https://TU-Logs-",{"Ref": "BuildId"},".",{"Ref": "DNSDomain" }, "/kopf/"]]}
    },
    "KinesisARN" : {
      "Description" : "Use this ARN to point the subscription filters to",
      "Value" :  { "Fn::Join" : [ ":", [ "arn", "aws", "kinesis",{ "Ref" : "AWS::Region" },{ "Ref" : "AWS::AccountId" }, { "Fn::Join" : [ "/", [ "stream", { "Ref": "KinesisSubscriptionStream"} ] ] } ] ] }
    },
    "RoleARN" : {
      "Description" : "role-arn for the subsctiontion ",
      "Value" :  { "Fn::GetAtt" : [ "CloudWatchLogsKinesisRole", "Arn" ] }
    },
    "CrossDestinationARN" : {
      "Description" : "role-arn for the subsctiontion ",
      "Value" :  { "Fn::Join" : ["",["arn:aws:logs:",{ "Ref" : "AWS::Region" },":",{ "Ref" : "AWS::AccountId" },":destination:ELKCrossLogDestination-",{"Ref": "BuildId"}]]}
    }
  }
}
